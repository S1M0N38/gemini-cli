{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Gemini CLI documentation","text":"<p>This documentation provides a comprehensive guide to installing, using, and developing Gemini CLI. This tool lets you interact with Gemini models through a command-line interface.</p>"},{"location":"#overview","title":"Overview","text":"<p>Gemini CLI brings the capabilities of Gemini models to your terminal in an interactive Read-Eval-Print Loop (REPL) environment. Gemini CLI consists of a client-side application (<code>packages/cli</code>) that communicates with a local server (<code>packages/core</code>), which in turn manages requests to the Gemini API and its AI models. Gemini CLI also contains a variety of tools for tasks such as performing file system operations, running shells, and web fetching, which are managed by <code>packages/core</code>.</p>"},{"location":"#navigating-the-documentation","title":"Navigating the documentation","text":"<p>This documentation is organized into the following sections:</p> <ul> <li>Execution and Deployment: Information for running Gemini CLI.</li> <li>Architecture Overview: Understand the high-level design of Gemini CLI, including its components and how they interact.</li> <li>CLI Usage: Documentation for <code>packages/cli</code>.</li> <li>CLI Introduction: Overview of the command-line interface.</li> <li>Commands: Description of available CLI commands.</li> <li>Configuration: Information on configuring the CLI.</li> <li>Checkpointing: Documentation for the checkpointing feature.</li> <li>Extensions: How to extend the CLI with new functionality.</li> <li>Telemetry: Overview of telemetry in the CLI.</li> <li>Core Details: Documentation for <code>packages/core</code>.</li> <li>Core Introduction: Overview of the core component.</li> <li>Tools API: Information on how the core manages and exposes tools.</li> <li>Tools:</li> <li>Tools Overview: Overview of the available tools.</li> <li>File System Tools: Documentation for the <code>read_file</code> and <code>write_file</code> tools.</li> <li>Multi-File Read Tool: Documentation for the <code>read_many_files</code> tool.</li> <li>Shell Tool: Documentation for the <code>run_shell_command</code> tool.</li> <li>Web Fetch Tool: Documentation for the <code>web_fetch</code> tool.</li> <li>Web Search Tool: Documentation for the <code>google_web_search</code> tool.</li> <li>Memory Tool: Documentation for the <code>save_memory</code> tool.</li> <li>Contributing &amp; Development Guide: Information for contributors and developers, including setup, building, testing, and coding conventions.</li> <li>NPM Workspaces and Publishing: Details on how the project's packages are managed and published.</li> <li>Troubleshooting Guide: Find solutions to common problems and FAQs.</li> <li>Terms of Service and Privacy Notice: Information on the terms of service and privacy notices applicable to your use of Gemini CLI.</li> </ul> <p>We hope this documentation helps you make the most of the Gemini CLI!</p>"},{"location":"Uninstall/","title":"Uninstall","text":""},{"location":"Uninstall/#uninstalling-the-cli","title":"Uninstalling the CLI","text":"<p>Your uninstall method depends on how you ran the CLI. Follow the instructions for either npx or a global npm installation.</p>"},{"location":"Uninstall/#method-1-using-npx","title":"Method 1: Using npx","text":"<p>npx runs packages from a temporary cache without a permanent installation. To \"uninstall\" the CLI, you must clear this cache, which will remove gemini-cli and any other packages previously executed with npx.</p> <p>The npx cache is a directory named <code>_npx</code> inside your main npm cache folder. You can find your npm cache path by running <code>npm config get cache</code>.</p> <p>For macOS / Linux</p> <pre><code># The path is typically ~/.npm/_npx\nrm -rf \"$(npm config get cache)/_npx\"\n</code></pre> <p>For Windows</p> <p>Command Prompt</p> <pre><code>:: The path is typically %LocalAppData%\\npm-cache\\_npx\nrmdir /s /q \"%LocalAppData%\\npm-cache\\_npx\"\n</code></pre> <p>PowerShell</p> <pre><code># The path is typically $env:LocalAppData\\npm-cache\\_npx\nRemove-Item -Path (Join-Path $env:LocalAppData \"npm-cache\\_npx\") -Recurse -Force\n</code></pre>"},{"location":"Uninstall/#method-2-using-npm-global-install","title":"Method 2: Using npm (Global Install)","text":"<p>If you installed the CLI globally (e.g., <code>npm install -g @google/gemini-cli</code>), use the <code>npm uninstall</code> command with the <code>-g</code> flag to remove it.</p> <pre><code>npm uninstall -g @google/gemini-cli\n</code></pre> <p>This command completely removes the package from your system.</p>"},{"location":"architecture/","title":"Gemini CLI Architecture Overview","text":"<p>This document provides a high-level overview of the Gemini CLI's architecture.</p>"},{"location":"architecture/#core-components","title":"Core components","text":"<p>The Gemini CLI is primarily composed of two main packages, along with a suite of tools that can be used by the system in the course of handling command-line input:</p> <ol> <li> <p>CLI package (<code>packages/cli</code>):</p> <ul> <li>Purpose: This contains the user-facing portion of the Gemini CLI, such as handling the initial user input, presenting the final output, and managing the overall user experience.</li> <li>Key functions contained in the package:</li> <li>Input processing</li> <li>History management</li> <li>Display rendering</li> <li>Theme and UI customization</li> <li>CLI configuration settings</li> </ul> </li> <li> <p>Core package (<code>packages/core</code>):</p> <ul> <li>Purpose: This acts as the backend for the Gemini CLI. It receives requests sent from <code>packages/cli</code>, orchestrates interactions with the Gemini API, and manages the execution of available tools.</li> <li>Key functions contained in the package:</li> <li>API client for communicating with the Google Gemini API</li> <li>Prompt construction and management</li> <li>Tool registration and execution logic</li> <li>State management for conversations or sessions</li> <li>Server-side configuration</li> </ul> </li> <li> <p>Tools (<code>packages/core/src/tools/</code>):</p> <ul> <li>Purpose: These are individual modules that extend the capabilities of the Gemini model, allowing it to interact with the local environment (e.g., file system, shell commands, web fetching).</li> <li>Interaction: <code>packages/core</code> invokes these tools based on requests from the Gemini model.</li> </ul> </li> </ol>"},{"location":"architecture/#interaction-flow","title":"Interaction Flow","text":"<p>A typical interaction with the Gemini CLI follows this flow:</p> <ol> <li>User input: The user types a prompt or command into the terminal, which is managed by <code>packages/cli</code>.</li> <li>Request to core: <code>packages/cli</code> sends the user's input to <code>packages/core</code>.</li> <li>Request processed: The core package:<ul> <li>Constructs an appropriate prompt for the Gemini API, possibly including conversation history and available tool definitions.</li> <li>Sends the prompt to the Gemini API.</li> </ul> </li> <li>Gemini API response: The Gemini API processes the prompt and returns a response. This response might be a direct answer or a request to use one of the available tools.</li> <li>Tool execution (if applicable):<ul> <li>When the Gemini API requests a tool, the core package prepares to execute it.</li> <li>If the requested tool can modify the file system or execute shell commands, the user is first given details of the tool and its arguments, and the user must approve the execution.</li> <li>Read-only operations, such as reading files, might not require explicit user confirmation to proceed.</li> <li>Once confirmed, or if confirmation is not required, the core package executes the relevant action within the relevant tool, and the result is sent back to the Gemini API by the core package.</li> <li>The Gemini API processes the tool result and generates a final response.</li> </ul> </li> <li>Response to CLI: The core package sends the final response back to the CLI package.</li> <li>Display to user: The CLI package formats and displays the response to the user in the terminal.</li> </ol>"},{"location":"architecture/#key-design-principles","title":"Key Design Principles","text":"<ul> <li>Modularity: Separating the CLI (frontend) from the Core (backend) allows for independent development and potential future extensions (e.g., different frontends for the same backend).</li> <li>Extensibility: The tool system is designed to be extensible, allowing new capabilities to be added.</li> <li>User experience: The CLI focuses on providing a rich and interactive terminal experience.</li> </ul>"},{"location":"checkpointing/","title":"Checkpointing","text":"<p>The Gemini CLI includes a Checkpointing feature that automatically saves a snapshot of your project's state before any file modifications are made by AI-powered tools. This allows you to safely experiment with and apply code changes, knowing you can instantly revert back to the state before the tool was run.</p>"},{"location":"checkpointing/#how-it-works","title":"How It Works","text":"<p>When you approve a tool that modifies the file system (like <code>write_file</code> or <code>replace</code>), the CLI automatically creates a \"checkpoint.\" This checkpoint includes:</p> <ol> <li>A Git Snapshot: A commit is made in a special, shadow Git repository located in your home directory (<code>~/.gemini/history/&lt;project_hash&gt;</code>). This snapshot captures the complete state of your project files at that moment. It does not interfere with your own project's Git repository.</li> <li>Conversation History: The entire conversation you've had with the agent up to that point is saved.</li> <li>The Tool Call: The specific tool call that was about to be executed is also stored.</li> </ol> <p>If you want to undo the change or simply go back, you can use the <code>/restore</code> command. Restoring a checkpoint will:</p> <ul> <li>Revert all files in your project to the state captured in the snapshot.</li> <li>Restore the conversation history in the CLI.</li> <li>Re-propose the original tool call, allowing you to run it again, modify it, or simply ignore it.</li> </ul> <p>All checkpoint data, including the Git snapshot and conversation history, is stored locally on your machine. The Git snapshot is stored in the shadow repository while the conversation history and tool calls are saved in a JSON file in your project's temporary directory, typically located at <code>~/.gemini/tmp/&lt;project_hash&gt;/checkpoints</code>.</p>"},{"location":"checkpointing/#enabling-the-feature","title":"Enabling the Feature","text":"<p>The Checkpointing feature is disabled by default. To enable it, you can either use a command-line flag or edit your <code>settings.json</code> file.</p>"},{"location":"checkpointing/#using-the-command-line-flag","title":"Using the Command-Line Flag","text":"<p>You can enable checkpointing for the current session by using the <code>--checkpointing</code> flag when starting the Gemini CLI:</p> <pre><code>gemini --checkpointing\n</code></pre>"},{"location":"checkpointing/#using-the-settingsjson-file","title":"Using the <code>settings.json</code> File","text":"<p>To enable checkpointing by default for all sessions, you need to edit your <code>settings.json</code> file.</p> <p>Add the following key to your <code>settings.json</code>:</p> <pre><code>{\n  \"checkpointing\": {\n    \"enabled\": true\n  }\n}\n</code></pre>"},{"location":"checkpointing/#using-the-restore-command","title":"Using the <code>/restore</code> Command","text":"<p>Once enabled, checkpoints are created automatically. To manage them, you use the <code>/restore</code> command.</p>"},{"location":"checkpointing/#list-available-checkpoints","title":"List Available Checkpoints","text":"<p>To see a list of all saved checkpoints for the current project, simply run:</p> <pre><code>/restore\n</code></pre> <p>The CLI will display a list of available checkpoint files. These file names are typically composed of a timestamp, the name of the file being modified, and the name of the tool that was about to be run (e.g., <code>2025-06-22T10-00-00_000Z-my-file.txt-write_file</code>).</p>"},{"location":"checkpointing/#restore-a-specific-checkpoint","title":"Restore a Specific Checkpoint","text":"<p>To restore your project to a specific checkpoint, use the checkpoint file from the list:</p> <pre><code>/restore &lt;checkpoint_file&gt;\n</code></pre> <p>For example:</p> <pre><code>/restore 2025-06-22T10-00-00_000Z-my-file.txt-write_file\n</code></pre> <p>After running the command, your files and conversation will be immediately restored to the state they were in when the checkpoint was created, and the original tool prompt will reappear.</p>"},{"location":"deployment/","title":"Gemini CLI Execution and Deployment","text":"<p>This document describes how to run Gemini CLI and explains the deployment architecture that Gemini CLI uses.</p>"},{"location":"deployment/#running-gemini-cli","title":"Running Gemini CLI","text":"<p>There are several ways to run Gemini CLI. The option you choose depends on how you intend to use Gemini CLI.</p>"},{"location":"deployment/#1-standard-installation-recommended-for-typical-users","title":"1. Standard installation (Recommended for typical users)","text":"<p>This is the recommended way for end-users to install Gemini CLI. It involves downloading the Gemini CLI package from the NPM registry.</p> <ul> <li>Global install:</li> </ul> <p>```bash   # Install the CLI globally   npm install -g @google/gemini-cli</p> <p># Now you can run the CLI from anywhere   gemini   ```</p> <ul> <li>NPX execution: <code>bash   # Execute the latest version from NPM without a global install   npx @google/gemini-cli</code></li> </ul>"},{"location":"deployment/#2-running-in-a-sandbox-dockerpodman","title":"2. Running in a sandbox (Docker/Podman)","text":"<p>For security and isolation, Gemini CLI can be run inside a container. This is the default way that the CLI executes tools that might have side effects.</p> <ul> <li>Directly from the Registry:   You can run the published sandbox image directly. This is useful for environments where you only have Docker and want to run the CLI.   <code>bash   # Run the published sandbox image   docker run --rm -it us-docker.pkg.dev/gemini-code-dev/gemini-cli/sandbox:0.1.1</code></li> <li>Using the <code>--sandbox</code> flag:   If you have Gemini CLI installed locally (using the standard installation described above), you can instruct it to run inside the sandbox container.   <code>bash   gemini --sandbox -y -p \"your prompt here\"</code></li> </ul>"},{"location":"deployment/#3-running-from-source-recommended-for-gemini-cli-contributors","title":"3. Running from source (Recommended for Gemini CLI contributors)","text":"<p>Contributors to the project will want to run the CLI directly from the source code.</p> <ul> <li>Development Mode:   This method provides hot-reloading and is useful for active development.   <code>bash   # From the root of the repository   npm run start</code></li> <li>Production-like mode (Linked package):   This method simulates a global installation by linking your local package. It's useful for testing a local build in a production workflow.</li> </ul> <p>```bash   # Link the local cli package to your global node_modules   npm link packages/cli</p> <p># Now you can run your local version using the <code>gemini</code> command   gemini   ```</p>"},{"location":"deployment/#4-running-the-latest-gemini-cli-commit-from-github","title":"4. Running the latest Gemini CLI commit from GitHub","text":"<p>You can run the most recently committed version of Gemini CLI directly from the GitHub repository. This is useful for testing features still in development.</p> <pre><code># Execute the CLI directly from the main branch on GitHub\nnpx https://github.com/google-gemini/gemini-cli\n</code></pre>"},{"location":"deployment/#deployment-architecture","title":"Deployment architecture","text":"<p>The execution methods described above are made possible by the following architectural components and processes:</p> <p>NPM packages</p> <p>Gemini CLI project is a monorepo that publishes two core packages to the NPM registry:</p> <ul> <li><code>@google/gemini-cli-core</code>: The backend, handling logic and tool execution.</li> <li><code>@google/gemini-cli</code>: The user-facing frontend.</li> </ul> <p>These packages are used when performing the standard installation and when running Gemini CLI from the source.</p> <p>Build and packaging processes</p> <p>There are two distinct build processes used, depending on the distribution channel:</p> <ul> <li> <p>NPM publication: For publishing to the NPM registry, the TypeScript source code in <code>@google/gemini-cli-core</code> and <code>@google/gemini-cli</code> is transpiled into standard JavaScript using the TypeScript Compiler (<code>tsc</code>). The resulting <code>dist/</code> directory is what gets published in the NPM package. This is a standard approach for TypeScript libraries.</p> </li> <li> <p>GitHub <code>npx</code> execution: When running the latest version of Gemini CLI directly from GitHub, a different process is triggered by the <code>prepare</code> script in <code>package.json</code>. This script uses <code>esbuild</code> to bundle the entire application and its dependencies into a single, self-contained JavaScript file. This bundle is created on-the-fly on the user's machine and is not checked into the repository.</p> </li> </ul> <p>Docker sandbox image</p> <p>The Docker-based execution method is supported by the <code>gemini-cli-sandbox</code> container image. This image is published to a container registry and contains a pre-installed, global version of Gemini CLI.</p>"},{"location":"deployment/#release-process","title":"Release process","text":"<p>The release process is automated through GitHub Actions. The release workflow performs the following actions:</p> <ol> <li>Build the NPM packages using <code>tsc</code>.</li> <li>Publish the NPM packages to the artifact registry.</li> <li>Create GitHub releases with bundled assets.</li> </ol>"},{"location":"extension/","title":"Gemini CLI Extensions","text":"<p>Gemini CLI supports extensions that can be used to configure and extend its functionality.</p>"},{"location":"extension/#how-it-works","title":"How it works","text":"<p>On startup, Gemini CLI looks for extensions in two locations:</p> <ol> <li><code>&lt;workspace&gt;/.gemini/extensions</code></li> <li><code>&lt;home&gt;/.gemini/extensions</code></li> </ol> <p>Gemini CLI loads all extensions from both locations. If an extension with the same name exists in both locations, the extension in the workspace directory takes precedence.</p> <p>Within each location, individual extensions exist as a directory that contains a <code>gemini-extension.json</code> file. For example:</p> <p><code>&lt;workspace&gt;/.gemini/extensions/my-extension/gemini-extension.json</code></p>"},{"location":"extension/#gemini-extensionjson","title":"<code>gemini-extension.json</code>","text":"<p>The <code>gemini-extension.json</code> file contains the configuration for the extension. The file has the following structure:</p> <pre><code>{\n  \"name\": \"my-extension\",\n  \"version\": \"1.0.0\",\n  \"mcpServers\": {\n    \"my-server\": {\n      \"command\": \"node my-server.js\"\n    }\n  },\n  \"contextFileName\": \"GEMINI.md\",\n  \"excludeTools\": [\"run_shell_command\"]\n}\n</code></pre> <ul> <li><code>name</code>: The name of the extension. This is used to uniquely identify the extension. This should match the name of your extension directory.</li> <li><code>version</code>: The version of the extension.</li> <li><code>mcpServers</code>: A map of MCP servers to configure. The key is the name of the server, and the value is the server configuration. These servers will be loaded on startup just like MCP servers configured in a <code>settings.json</code> file. If both an extension and a <code>settings.json</code> file configure an MCP server with the same name, the server defined in the <code>settings.json</code> file takes precedence.</li> <li><code>contextFileName</code>: The name of the file that contains the context for the extension. This will be used to load the context from the workspace. If this property is not used but a <code>GEMINI.md</code> file is present in your extension directory, then that file will be loaded.</li> <li><code>excludeTools</code>: An array of tool names to exclude from the model. You can also specify command-specific restrictions for tools that support it, like the <code>run_shell_command</code> tool. For example, <code>\"excludeTools\": [\"run_shell_command(rm -rf)\"]</code> will block the <code>rm -rf</code> command.</li> </ul> <p>When Gemini CLI starts, it loads all the extensions and merges their configurations. If there are any conflicts, the workspace configuration takes precedence.</p>"},{"location":"integration-tests/","title":"Integration Tests","text":"<p>This document provides information about the integration testing framework used in this project.</p>"},{"location":"integration-tests/#overview","title":"Overview","text":"<p>The integration tests are designed to validate the end-to-end functionality of the Gemini CLI. They execute the built binary in a controlled environment and verify that it behaves as expected when interacting with the file system.</p> <p>These tests are located in the <code>integration-tests</code> directory and are run using a custom test runner.</p>"},{"location":"integration-tests/#running-the-tests","title":"Running the tests","text":"<p>The integration tests are not run as part of the default <code>npm run test</code> command. They must be run explicitly using the <code>npm run test:integration:all</code> script.</p> <p>The integration tests can also be run using the following shortcut:</p> <pre><code>npm run test:e2e\n</code></pre>"},{"location":"integration-tests/#running-a-specific-set-of-tests","title":"Running a specific set of tests","text":"<p>To run a subset of test files, you can use <code>npm run &lt;integration test command&gt; &lt;file_name1&gt; ....</code> where  is either <code>test:e2e</code> or <code>test:integration*</code> and <code>&lt;file_name&gt;</code> is any of the <code>.test.js</code> files in the <code>integration-tests/</code> directory. For example, the following command runs <code>list_directory.test.js</code> and <code>write_file.test.js</code>: <pre><code>npm run test:e2e list_directory write_file\n</code></pre>"},{"location":"integration-tests/#running-a-single-test-by-name","title":"Running a single test by name","text":"<p>To run a single test by its name, use the <code>--test-name-pattern</code> flag:</p> <pre><code>npm run test:e2e -- --test-name-pattern \"reads a file\"\n</code></pre>"},{"location":"integration-tests/#running-all-tests","title":"Running all tests","text":"<p>To run the entire suite of integration tests, use the following command:</p> <pre><code>npm run test:integration:all\n</code></pre>"},{"location":"integration-tests/#sandbox-matrix","title":"Sandbox matrix","text":"<p>The <code>all</code> command will run tests for <code>no sandboxing</code>, <code>docker</code> and <code>podman</code>. Each individual type can be run using the following commands:</p> <pre><code>npm run test:integration:sandbox:none\n</code></pre> <pre><code>npm run test:integration:sandbox:docker\n</code></pre> <pre><code>npm run test:integration:sandbox:podman\n</code></pre>"},{"location":"integration-tests/#diagnostics","title":"Diagnostics","text":"<p>The integration test runner provides several options for diagnostics to help track down test failures.</p>"},{"location":"integration-tests/#keeping-test-output","title":"Keeping test output","text":"<p>You can preserve the temporary files created during a test run for inspection. This is useful for debugging issues with file system operations.</p> <p>To keep the test output, you can either use the <code>--keep-output</code> flag or set the <code>KEEP_OUTPUT</code> environment variable to <code>true</code>.</p> <pre><code># Using the flag\nnpm run test:integration:sandbox:none -- --keep-output\n\n# Using the environment variable\nKEEP_OUTPUT=true npm run test:integration:sandbox:none\n</code></pre> <p>When output is kept, the test runner will print the path to the unique directory for the test run.</p>"},{"location":"integration-tests/#verbose-output","title":"Verbose output","text":"<p>For more detailed debugging, the <code>--verbose</code> flag streams the real-time output from the <code>gemini</code> command to the console.</p> <pre><code>npm run test:integration:sandbox:none -- --verbose\n</code></pre> <p>When using <code>--verbose</code> and <code>--keep-output</code> in the same command, the output is streamed to the console and also saved to a log file within the test's temporary directory.</p> <p>The verbose output is formatted to clearly identify the source of the logs:</p> <pre><code>--- TEST: &lt;file-name-without-js&gt;:&lt;test-name&gt; ---\n... output from the gemini command ...\n--- END TEST: &lt;file-name-without-js&gt;:&lt;test-name&gt; ---\n</code></pre>"},{"location":"integration-tests/#linting-and-formatting","title":"Linting and formatting","text":"<p>To ensure code quality and consistency, the integration test files are linted as part of the main build process. You can also manually run the linter and auto-fixer.</p>"},{"location":"integration-tests/#running-the-linter","title":"Running the linter","text":"<p>To check for linting errors, run the following command:</p> <pre><code>npm run lint\n</code></pre> <p>You can include the <code>--fix</code> flag in the command to automatically fix any fixable linting errors:</p> <pre><code>npm run lint --fix\n</code></pre>"},{"location":"integration-tests/#directory-structure","title":"Directory structure","text":"<p>The integration tests create a unique directory for each test run inside the <code>.integration-tests</code> directory. Within this directory, a subdirectory is created for each test file, and within that, a subdirectory is created for each individual test case.</p> <p>This structure makes it easy to locate the artifacts for a specific test run, file, or case.</p> <pre><code>.integration-tests/\n\u2514\u2500\u2500 &lt;run-id&gt;/\n    \u2514\u2500\u2500 &lt;test-file-name&gt;.test.js/\n        \u2514\u2500\u2500 &lt;test-case-name&gt;/\n            \u251c\u2500\u2500 output.log\n            \u2514\u2500\u2500 ...other test artifacts...\n</code></pre>"},{"location":"integration-tests/#continuous-integration","title":"Continuous integration","text":"<p>To ensure the integration tests are always run, a GitHub Actions workflow is defined in <code>.github/workflows/e2e.yml</code>. This workflow automatically runs the integration tests on every pull request and push to the <code>main</code> branch.</p> <p>The workflow runs the tests in different sandboxing environments to ensure Gemini CLI is tested across each:</p> <ul> <li><code>sandbox:none</code>: Runs the tests without any sandboxing.</li> <li><code>sandbox:docker</code>: Runs the tests in a Docker container.</li> <li><code>sandbox:podman</code>: Runs the tests in a Podman container.</li> </ul>"},{"location":"npm/","title":"Package Overview","text":"<p>This monorepo contains two main packages: <code>@google/gemini-cli</code> and <code>@google/gemini-cli-core</code>.</p>"},{"location":"npm/#googlegemini-cli","title":"<code>@google/gemini-cli</code>","text":"<p>This is the main package for the Gemini CLI. It is responsible for the user interface, command parsing, and all other user-facing functionality.</p> <p>When this package is published, it is bundled into a single executable file. This bundle includes all of the package's dependencies, including <code>@google/gemini-cli-core</code>. This means that whether a user installs the package with <code>npm install -g @google/gemini-cli</code> or runs it directly with <code>npx @google/gemini-cli</code>, they are using this single, self-contained executable.</p>"},{"location":"npm/#googlegemini-cli-core","title":"<code>@google/gemini-cli-core</code>","text":"<p>This package contains the core logic for interacting with the Gemini API. It is responsible for making API requests, handling authentication, and managing the local cache.</p> <p>This package is not bundled. When it is published, it is published as a standard Node.js package with its own dependencies. This allows it to be used as a standalone package in other projects, if needed. All transpiled js code in the <code>dist</code> folder is included in the package.</p>"},{"location":"npm/#release-process","title":"Release Process","text":"<p>This project follows a structured release process to ensure that all packages are versioned and published correctly. The process is designed to be as automated as possible.</p>"},{"location":"npm/#how-to-release","title":"How To Release","text":"<p>Releases are managed through the release.yml GitHub Actions workflow. To perform a manual release for a patch or hotfix:</p> <ol> <li>Navigate to the Actions tab of the repository.</li> <li>Select the Release workflow from the list.</li> <li>Click the Run workflow dropdown button.</li> <li>Fill in the required inputs:<ul> <li>Version: The exact version to release (e.g., <code>v0.2.1</code>).</li> <li>Ref: The branch or commit SHA to release from (defaults to <code>main</code>).</li> <li>Dry Run: Leave as <code>true</code> to test the workflow without publishing, or set to <code>false</code> to perform a live release.</li> </ul> </li> <li>Click Run workflow.</li> </ol>"},{"location":"npm/#nightly-releases","title":"Nightly Releases","text":"<p>In addition to manual releases, this project has an automated nightly release process to provide the latest \"bleeding edge\" version for testing and development.</p>"},{"location":"npm/#process","title":"Process","text":"<p>Every night at midnight UTC, the Release workflow runs automatically on a schedule. It performs the following steps:</p> <ol> <li>Checks out the latest code from the <code>main</code> branch.</li> <li>Installs all dependencies.</li> <li>Runs the full suite of <code>preflight</code> checks and integration tests.</li> <li>If all tests succeed, it calculates the next nightly version number (e.g., <code>v0.2.1-nightly.20230101</code>).</li> <li>It then builds and publishes the packages to npm with the <code>nightly</code> dist-tag.</li> <li>Finally, it creates a GitHub Release for the nightly version.</li> </ol>"},{"location":"npm/#failure-handling","title":"Failure Handling","text":"<p>If any step in the nightly workflow fails, it will automatically create a new issue in the repository with the labels <code>bug</code> and <code>nightly-failure</code>. The issue will contain a link to the failed workflow run for easy debugging.</p>"},{"location":"npm/#how-to-use-the-nightly-build","title":"How to Use the Nightly Build","text":"<p>To install the latest nightly build, use the <code>@nightly</code> tag:</p> <pre><code>npm install -g @google/gemini-cli@nightly\n</code></pre> <p>We also run a Google cloud build called release-docker.yml. Which publishes the sandbox docker to match your release. This will also be moved to GH and combined with the main release file once service account permissions are sorted out.</p>"},{"location":"npm/#after-the-release","title":"After the Release","text":"<p>After the workflow has successfully completed, you can monitor its progress in the GitHub Actions tab. Once complete, you should:</p> <ol> <li>Go to the pull requests page of the repository.</li> <li>Create a new pull request from the <code>release/vX.Y.Z</code> branch to <code>main</code>.</li> <li>Review the pull request (it should only contain version updates in <code>package.json</code> files) and merge it. This keeps the version in <code>main</code> up-to-date.</li> </ol>"},{"location":"npm/#release-validation","title":"Release Validation","text":"<p>After pushing a new release smoke testing should be performed to ensure that the packages are working as expected. This can be done by installing the packages locally and running a set of tests to ensure that they are functioning correctly.</p> <ul> <li><code>npx -y @google/gemini-cli@latest --version</code> to validate the push worked as expected if you were not doing a rc or dev tag</li> <li><code>npx -y @google/gemini-cli@&lt;release tag&gt; --version</code> to validate the tag pushed appropriately</li> <li>This is destructive locally <code>npm uninstall @google/gemini-cli &amp;&amp; npm uninstall -g @google/gemini-cli &amp;&amp; npm cache clean --force &amp;&amp;  npm install @google/gemini-cli@&lt;version&gt;</code></li> <li>Smoke testing a basic run through of exercising a few llm commands and tools is recommended to ensure that the packages are working as expected. We'll codify this more in the future.</li> </ul>"},{"location":"npm/#when-to-merge-the-version-change-or-not","title":"When to merge the version change, or not?","text":"<p>The above pattern for creating patch or hotfix releases from current or older commits leaves the repository in the following state:</p> <ol> <li>The Tag (<code>vX.Y.Z-patch.1</code>): This tag correctly points to the original commit on main     that contains the stable code you intended to release. This is crucial. Anyone checking     out this tag gets the exact code that was published.</li> <li>The Branch (<code>release-vX.Y.Z-patch.1</code>): This branch contains one new commit on top of the     tagged commit. That new commit only contains the version number change in package.json     (and other related files like package-lock.json).</li> </ol> <p>This separation is good. It keeps your main branch history clean of release-specific version bumps until you decide to merge them.</p> <p>This is the critical decision, and it depends entirely on the nature of the release.</p>"},{"location":"npm/#merge-back-for-stable-patches-and-hotfixes","title":"Merge Back for Stable Patches and Hotfixes","text":"<p>You almost always want to merge the <code>release-&lt;tag&gt;</code> branch back into <code>main</code> for any stable patch or hotfix release.</p> <ul> <li>Why? The primary reason is to update the version in main's package.json. If you release   v1.2.1 from an older commit but never merge the version bump back, your main branch's   package.json will still say \"version\": \"1.2.0\". The next developer who starts work for   the next feature release (v1.3.0) will be branching from a codebase that has an   incorrect, older version number. This leads to confusion and requires manual version   bumping later.</li> <li>The Process: After the release-v1.2.1 branch is created and the package is successfully   published, you should open a pull request to merge release-v1.2.1 into main. This PR   will contain just one commit: \"chore: bump version to v1.2.1\". It's a clean, simple   integration that keeps your main branch in sync with the latest released version.</li> </ul>"},{"location":"npm/#do-not-merge-back-for-pre-releases-rc-beta-dev","title":"Do NOT Merge Back for Pre-Releases (RC, Beta, Dev)","text":"<p>You typically do not merge release branches for pre-releases back into <code>main</code>.</p> <ul> <li>Why? Pre-release versions (e.g., v1.3.0-rc.1, v1.3.0-rc.2) are, by definition, not   stable and are temporary. You don't want to pollute your main branch's history with a   series of version bumps for release candidates. The package.json in main should reflect   the latest stable release version, not an RC.</li> <li>The Process: The release-v1.3.0-rc.1 branch is created, the npm publish --tag rc happens,   and then... the branch has served its purpose. You can simply delete it. The code for   the RC is already on main (or a feature branch), so no functional code is lost. The   release branch was just a temporary vehicle for the version number.</li> </ul>"},{"location":"npm/#local-testing-and-validation-changes-to-the-packaging-and-publishing-process","title":"Local Testing and Validation: Changes to the Packaging and Publishing Process","text":"<p>If you need to test the release process without actually publishing to NPM or creating a public GitHub release, you can trigger the workflow manually from the GitHub UI.</p> <ol> <li>Go to the Actions tab of the repository.</li> <li>Click on the \"Run workflow\" dropdown.</li> <li>Leave the <code>dry_run</code> option checked (<code>true</code>).</li> <li>Click the \"Run workflow\" button.</li> </ol> <p>This will run the entire release process but will skip the <code>npm publish</code> and <code>gh release create</code> steps. You can inspect the workflow logs to ensure everything is working as expected.</p> <p>It is crucial to test any changes to the packaging and publishing process locally before committing them. This ensures that the packages will be published correctly and that they will work as expected when installed by a user.</p> <p>To validate your changes, you can perform a dry run of the publishing process. This will simulate the publishing process without actually publishing the packages to the npm registry.</p> <pre><code>npm_package_version=9.9.9 SANDBOX_IMAGE_REGISTRY=\"registry\" SANDBOX_IMAGE_NAME=\"thename\" npm run publish:npm --dry-run\n</code></pre> <p>This command will do the following:</p> <ol> <li>Build all the packages.</li> <li>Run all the prepublish scripts.</li> <li>Create the package tarballs that would be published to npm.</li> <li>Print a summary of the packages that would be published.</li> </ol> <p>You can then inspect the generated tarballs to ensure that they contain the correct files and that the <code>package.json</code> files have been updated correctly. The tarballs will be created in the root of each package's directory (e.g., <code>packages/cli/google-gemini-cli-0.1.6.tgz</code>).</p> <p>By performing a dry run, you can be confident that your changes to the packaging process are correct and that the packages will be published successfully.</p>"},{"location":"npm/#release-deep-dive","title":"Release Deep Dive","text":"<p>The main goal of the release process is to take the source code from the packages/ directory, build it, and assemble a clean, self-contained package in a temporary <code>bundle</code> directory at the root of the project. This <code>bundle</code> directory is what actually gets published to NPM.</p> <p>Here are the key stages:</p> <p>Stage 1: Pre-Release Sanity Checks and Versioning</p> <ul> <li>What happens: Before any files are moved, the process ensures the project is in a good state. This involves running tests,   linting, and type-checking (npm run preflight). The version number in the root package.json and packages/cli/package.json   is updated to the new release version.</li> <li>Why: This guarantees that only high-quality, working code is released. Versioning is the first step to signify a new   release.</li> </ul> <p>Stage 2: Building the Source Code</p> <ul> <li>What happens: The TypeScript source code in packages/core/src and packages/cli/src is compiled into JavaScript.</li> <li>File movement:</li> <li>packages/core/src/*/.ts -&gt; compiled to -&gt; packages/core/dist/</li> <li>packages/cli/src/*/.ts -&gt; compiled to -&gt; packages/cli/dist/</li> <li>Why: The TypeScript code written during development needs to be converted into plain JavaScript that can be run by   Node.js. The core package is built first as the cli package depends on it.</li> </ul> <p>Stage 3: Assembling the Final Publishable Package</p> <p>This is the most critical stage where files are moved and transformed into their final state for publishing. A temporary <code>bundle</code> folder is created at the project root to house the final package contents.</p> <ol> <li> <p>The <code>package.json</code> is Transformed:</p> <ul> <li>What happens: The package.json from packages/cli/ is read, modified, and written into the root <code>bundle</code>/ directory.</li> <li>File movement: packages/cli/package.json -&gt; (in-memory transformation) -&gt; <code>bundle</code>/package.json</li> <li>Why: The final package.json must be different from the one used in development. Key changes include:</li> <li>Removing devDependencies.</li> <li>Removing workspace-specific \"dependencies\": { \"@gemini-cli/core\": \"workspace:*\" } and ensuring the core code is     bundled directly into the final JavaScript file.</li> <li>Ensuring the bin, main, and files fields point to the correct locations within the final package structure.</li> </ul> </li> <li> <p>The JavaScript Bundle is Created:</p> <ul> <li>What happens: The built JavaScript from both packages/core/dist and packages/cli/dist are bundled into a single,   executable JavaScript file.</li> <li>File movement: packages/cli/dist/index.js + packages/core/dist/index.js -&gt; (bundled by esbuild) -&gt; <code>bundle</code>/gemini.js (or a   similar name).</li> <li>Why: This creates a single, optimized file that contains all the necessary application code. It simplifies the package   by removing the need for the core package to be a separate dependency on NPM, as its code is now included directly.</li> </ul> </li> <li> <p>Static and Supporting Files are Copied:</p> <ul> <li>What happens: Essential files that are not part of the source code but are required for the package to work correctly   or be well-described are copied into the <code>bundle</code> directory.</li> <li>File movement:</li> <li>README.md -&gt; <code>bundle</code>/README.md</li> <li>LICENSE -&gt; <code>bundle</code>/LICENSE</li> <li>packages/cli/src/utils/*.sb (sandbox profiles) -&gt; <code>bundle</code>/</li> <li>Why:</li> <li>The README.md and LICENSE are standard files that should be included in any NPM package.</li> <li>The sandbox profiles (.sb files) are critical runtime assets required for the CLI's sandboxing feature to     function. They must be located next to the final executable.</li> </ul> </li> </ol> <p>Stage 4: Publishing to NPM</p> <ul> <li>What happens: The npm publish command is run from inside the root <code>bundle</code> directory.</li> <li>Why: By running npm publish from within the <code>bundle</code> directory, only the files we carefully assembled in Stage 3 are uploaded   to the NPM registry. This prevents any source code, test files, or development configurations from being accidentally   published, resulting in a clean and minimal package for users.</li> </ul> <p>Summary of File Flow</p> <pre><code>graph TD\n    subgraph \"Source Files\"\n        A[\"packages/core/src/*.ts&lt;br/&gt;packages/cli/src/*.ts\"]\n        B[\"packages/cli/package.json\"]\n        C[\"README.md&lt;br/&gt;LICENSE&lt;br/&gt;packages/cli/src/utils/*.sb\"]\n    end\n\n    subgraph \"Process\"\n        D(Build)\n        E(Transform)\n        F(Assemble)\n        G(Publish)\n    end\n\n    subgraph \"Artifacts\"\n        H[\"Bundled JS\"]\n        I[\"Final package.json\"]\n        J[\"bundle/\"]\n    end\n\n    subgraph \"Destination\"\n        K[\"NPM Registry\"]\n    end\n\n    A --&gt; D --&gt; H\n    B --&gt; E --&gt; I\n    C --&gt; F\n    H --&gt; F\n    I --&gt; F\n    F --&gt; J\n    J --&gt; G --&gt; K\n</code></pre> <p>This process ensures that the final published artifact is a purpose-built, clean, and efficient representation of the project, rather than a direct copy of the development workspace.</p>"},{"location":"npm/#npm-workspaces","title":"NPM Workspaces","text":"<p>This project uses NPM Workspaces to manage the packages within this monorepo. This simplifies development by allowing us to manage dependencies and run scripts across multiple packages from the root of the project.</p>"},{"location":"npm/#how-it-works","title":"How it Works","text":"<p>The root <code>package.json</code> file defines the workspaces for this project:</p> <pre><code>{\n  \"workspaces\": [\"packages/*\"]\n}\n</code></pre> <p>This tells NPM that any folder inside the <code>packages</code> directory is a separate package that should be managed as part of the workspace.</p>"},{"location":"npm/#benefits-of-workspaces","title":"Benefits of Workspaces","text":"<ul> <li>Simplified Dependency Management: Running <code>npm install</code> from the root of the project will install all dependencies for all packages in the workspace and link them together. This means you don't need to run <code>npm install</code> in each package's directory.</li> <li>Automatic Linking: Packages within the workspace can depend on each other. When you run <code>npm install</code>, NPM will automatically create symlinks between the packages. This means that when you make changes to one package, the changes are immediately available to other packages that depend on it.</li> <li>Simplified Script Execution: You can run scripts in any package from the root of the project using the <code>--workspace</code> flag. For example, to run the <code>build</code> script in the <code>cli</code> package, you can run <code>npm run build --workspace @google/gemini-cli</code>.</li> </ul>"},{"location":"quota-and-pricing/","title":"Gemini CLI: Quotas and Pricing","text":"<p>Your Gemini CLI quotas and pricing depend on the type of account you use to authenticate with Google. Additionally, both quotas and pricing may be calculated differently based on the model version, requests, and tokens used. A summary of model usage is available through the <code>/stats</code> command and presented on exit at the end of a session. See privacy and terms for details on Privacy policy and Terms of Service. Note: published prices are list price; additional negotiated commercial discounting may apply.</p> <p>This article outlines the specific quotas and pricing applicable to the Gemini CLI when using different authentication methods.</p>"},{"location":"quota-and-pricing/#1-log-in-with-google-gemini-code-assist-free-tier","title":"1. Log in with Google (Gemini Code Assist Free Tier)","text":"<p>For users who authenticate by using their Google account to access Gemini Code Assist for individuals:</p> <ul> <li>Quota:</li> <li>60 requests per minute</li> <li>1000 requests per day</li> <li>Token usage is not applicable</li> <li>Cost: Free</li> <li>Details: Gemini Code Assist Quotas</li> <li>Notes: A specific quota for different models is not specified; model fallback may occur to preserve shared experience quality.</li> </ul>"},{"location":"quota-and-pricing/#2-gemini-api-key-unpaid","title":"2. Gemini API Key (Unpaid)","text":"<p>If you are using a Gemini API key for the free tier:</p> <ul> <li>Quota:</li> <li>Flash model only</li> <li>10 requests per minute</li> <li>250 requests per day</li> <li>Cost: Free</li> <li>Details: Gemini API Rate Limits</li> </ul>"},{"location":"quota-and-pricing/#3-gemini-api-key-paid","title":"3. Gemini API Key (Paid)","text":"<p>If you are using a Gemini API key with a paid plan:</p> <ul> <li>Quota: Varies by pricing tier.</li> <li>Cost: Varies by pricing tier and model/token usage.</li> <li>Details: Gemini API Rate Limits, Gemini API Pricing</li> </ul>"},{"location":"quota-and-pricing/#4-login-with-google-for-workspace-or-licensed-code-assist-users","title":"4. Login with Google (for Workspace or Licensed Code Assist users)","text":"<p>For users of Standard or Enterprise editions of Gemini Code Assist, quotas and pricing are based on a fixed price subscription with assigned license seats:</p> <ul> <li>Standard Tier:</li> <li>Quota: 120 requests per minute, 1500 per day</li> <li>Enterprise Tier:</li> <li>Quota: 120 requests per minute, 2000 per day</li> <li>Cost: Fixed price included with your Gemini for Google Workspace or Gemini Code Assist subscription.</li> <li>Details: Gemini Code Assist Quotas, Gemini Code Assist Pricing</li> <li>Notes:</li> <li>Specific quota for different models is not specified; model fallback may occur to preserve shared experience quality.</li> <li>Members of the Google Developer Program may have Gemini Code Assist licenses through their membership.</li> </ul>"},{"location":"quota-and-pricing/#5-vertex-ai-express-mode","title":"5. Vertex AI (Express Mode)","text":"<p>If you are using Vertex AI in Express Mode:</p> <ul> <li>Quota: Quotas are variable and specific to your account. See the source for more details.</li> <li>Cost: After your Express Mode usage is consumed and you enable billing for your project, cost is based on standard Vertex AI Pricing.</li> <li>Details: Vertex AI Express Mode Quotas</li> </ul>"},{"location":"quota-and-pricing/#6-vertex-ai-regular-mode","title":"6. Vertex AI (Regular Mode)","text":"<p>If you are using the standard Vertex AI service:</p> <ul> <li>Quota: Governed by a dynamic shared quota system or pre-purchased provisioned throughput.</li> <li>Cost: Based on model and token usage. See Vertex AI Pricing.</li> <li>Details: Vertex AI Dynamic Shared Quota</li> </ul>"},{"location":"quota-and-pricing/#7-google-one-and-ultra-plans-gemini-for-workspace-plans","title":"7. Google One and Ultra plans, Gemini for Workspace plans","text":"<p>These plans currently apply only to the use of Gemini web-based products provided by Google-based experiences (for example, the Gemini web app or the Flow video editor). These plans do not apply to the API usage which powers the Gemini CLI. Supporting these plans is under active consideration for future support.</p>"},{"location":"sandbox/","title":"Sandboxing in the Gemini CLI","text":"<p>This document provides a guide to sandboxing in the Gemini CLI, including prerequisites, quickstart, and configuration.</p>"},{"location":"sandbox/#prerequisites","title":"Prerequisites","text":"<p>Before using sandboxing, you need to install and set up the Gemini CLI:</p> <pre><code># install gemini-cli with npm\nnpm install -g @google/gemini-cli\n\n# Verify installation\ngemini --version\n</code></pre>"},{"location":"sandbox/#overview-of-sandboxing","title":"Overview of sandboxing","text":"<p>Sandboxing isolates potentially dangerous operations (such as shell commands or file modifications) from your host system, providing a security barrier between AI operations and your environment.</p> <p>The benefits of sandboxing include:</p> <ul> <li>Security: Prevent accidental system damage or data loss.</li> <li>Isolation: Limit file system access to project directory.</li> <li>Consistency: Ensure reproducible environments across different systems.</li> <li>Safety: Reduce risk when working with untrusted code or experimental commands.</li> </ul>"},{"location":"sandbox/#sandboxing-methods","title":"Sandboxing methods","text":"<p>Your ideal method of sandboxing may differ depending on your platform and your preferred container solution.</p>"},{"location":"sandbox/#1-macos-seatbelt-macos-only","title":"1. macOS Seatbelt (macOS only)","text":"<p>Lightweight, built-in sandboxing using <code>sandbox-exec</code>.</p> <p>Default profile: <code>permissive-open</code> - restricts writes outside project directory but allows most other operations.</p>"},{"location":"sandbox/#2-container-based-dockerpodman","title":"2. Container-based (Docker/Podman)","text":"<p>Cross-platform sandboxing with complete process isolation.</p> <p>Note: Requires building the sandbox image locally or using a published image from your organization's registry.</p>"},{"location":"sandbox/#quickstart","title":"Quickstart","text":"<pre><code># Enable sandboxing with command flag\ngemini -s -p \"analyze the code structure\"\n\n# Use environment variable\nexport GEMINI_SANDBOX=true\ngemini -p \"run the test suite\"\n\n# Configure in settings.json\n{\n  \"sandbox\": \"docker\"\n}\n</code></pre>"},{"location":"sandbox/#configuration","title":"Configuration","text":""},{"location":"sandbox/#enable-sandboxing-in-order-of-precedence","title":"Enable sandboxing (in order of precedence)","text":"<ol> <li>Command flag: <code>-s</code> or <code>--sandbox</code></li> <li>Environment variable: <code>GEMINI_SANDBOX=true|docker|podman|sandbox-exec</code></li> <li>Settings file: <code>\"sandbox\": true</code> in <code>settings.json</code></li> </ol>"},{"location":"sandbox/#macos-seatbelt-profiles","title":"macOS Seatbelt profiles","text":"<p>Built-in profiles (set via <code>SEATBELT_PROFILE</code> env var):</p> <ul> <li><code>permissive-open</code> (default): Write restrictions, network allowed</li> <li><code>permissive-closed</code>: Write restrictions, no network</li> <li><code>permissive-proxied</code>: Write restrictions, network via proxy</li> <li><code>restrictive-open</code>: Strict restrictions, network allowed</li> <li><code>restrictive-closed</code>: Maximum restrictions</li> </ul>"},{"location":"sandbox/#linux-uidgid-handling","title":"Linux UID/GID handling","text":"<p>The sandbox automatically handles user permissions on Linux. Override these permissions with:</p> <pre><code>export SANDBOX_SET_UID_GID=true   # Force host UID/GID\nexport SANDBOX_SET_UID_GID=false  # Disable UID/GID mapping\n</code></pre>"},{"location":"sandbox/#troubleshooting","title":"Troubleshooting","text":""},{"location":"sandbox/#common-issues","title":"Common issues","text":"<p>\"Operation not permitted\"</p> <ul> <li>Operation requires access outside sandbox.</li> <li>Try more permissive profile or add mount points.</li> </ul> <p>Missing commands</p> <ul> <li>Add to custom Dockerfile.</li> <li>Install via <code>sandbox.bashrc</code>.</li> </ul> <p>Network issues</p> <ul> <li>Check sandbox profile allows network.</li> <li>Verify proxy configuration.</li> </ul>"},{"location":"sandbox/#debug-mode","title":"Debug mode","text":"<pre><code>DEBUG=1 gemini -s -p \"debug command\"\n</code></pre>"},{"location":"sandbox/#inspect-sandbox","title":"Inspect sandbox","text":"<pre><code># Check environment\ngemini -s -p \"run shell command: env | grep SANDBOX\"\n\n# List mounts\ngemini -s -p \"run shell command: mount | grep workspace\"\n</code></pre>"},{"location":"sandbox/#security-notes","title":"Security notes","text":"<ul> <li>Sandboxing reduces but doesn't eliminate all risks.</li> <li>Use the most restrictive profile that allows your work.</li> <li>Container overhead is minimal after first build.</li> <li>GUI applications may not work in sandboxes.</li> </ul>"},{"location":"sandbox/#related-documentation","title":"Related documentation","text":"<ul> <li>Configuration: Full configuration options.</li> <li>Commands: Available commands.</li> <li>Troubleshooting: General troubleshooting.</li> </ul>"},{"location":"telemetry/","title":"Gemini CLI Observability Guide","text":"<p>Telemetry provides data about Gemini CLI's performance, health, and usage. By enabling it, you can monitor operations, debug issues, and optimize tool usage through traces, metrics, and structured logs.</p> <p>Gemini CLI's telemetry system is built on the OpenTelemetry (OTEL) standard, allowing you to send data to any compatible backend.</p>"},{"location":"telemetry/#enabling-telemetry","title":"Enabling telemetry","text":"<p>You can enable telemetry in multiple ways. Configuration is primarily managed via the <code>.gemini/settings.json</code> file and environment variables, but CLI flags can override these settings for a specific session.</p>"},{"location":"telemetry/#order-of-precedence","title":"Order of precedence","text":"<p>The following lists the precedence for applying telemetry settings, with items listed higher having greater precedence:</p> <ol> <li> <p>CLI flags (for <code>gemini</code> command):</p> <ul> <li><code>--telemetry</code> / <code>--no-telemetry</code>: Overrides <code>telemetry.enabled</code>.</li> <li><code>--telemetry-target &lt;local|gcp&gt;</code>: Overrides <code>telemetry.target</code>.</li> <li><code>--telemetry-otlp-endpoint &lt;URL&gt;</code>: Overrides <code>telemetry.otlpEndpoint</code>.</li> <li><code>--telemetry-log-prompts</code> / <code>--no-telemetry-log-prompts</code>: Overrides <code>telemetry.logPrompts</code>.</li> </ul> </li> <li> <p>Environment variables:</p> <ul> <li><code>OTEL_EXPORTER_OTLP_ENDPOINT</code>: Overrides <code>telemetry.otlpEndpoint</code>.</li> </ul> </li> <li> <p>Workspace settings file (<code>.gemini/settings.json</code>): Values from the <code>telemetry</code> object in this project-specific file.</p> </li> <li> <p>User settings file (<code>~/.gemini/settings.json</code>): Values from the <code>telemetry</code> object in this global user file.</p> </li> <li> <p>Defaults: applied if not set by any of the above.</p> <ul> <li><code>telemetry.enabled</code>: <code>false</code></li> <li><code>telemetry.target</code>: <code>local</code></li> <li><code>telemetry.otlpEndpoint</code>: <code>http://localhost:4317</code></li> <li><code>telemetry.logPrompts</code>: <code>true</code></li> </ul> </li> </ol> <p>For the <code>npm run telemetry -- --target=&lt;gcp|local&gt;</code> script: The <code>--target</code> argument to this script only overrides the <code>telemetry.target</code> for the duration and purpose of that script (i.e., choosing which collector to start). It does not permanently change your <code>settings.json</code>. The script will first look at <code>settings.json</code> for a <code>telemetry.target</code> to use as its default.</p>"},{"location":"telemetry/#example-settings","title":"Example settings","text":"<p>The following code can be added to your workspace (<code>.gemini/settings.json</code>) or user (<code>~/.gemini/settings.json</code>) settings to enable telemetry and send the output to Google Cloud:</p> <pre><code>{\n  \"telemetry\": {\n    \"enabled\": true,\n    \"target\": \"gcp\"\n  },\n  \"sandbox\": false\n}\n</code></pre>"},{"location":"telemetry/#running-an-otel-collector","title":"Running an OTEL Collector","text":"<p>An OTEL Collector is a service that receives, processes, and exports telemetry data. The CLI sends data using the OTLP/gRPC protocol.</p> <p>Learn more about OTEL exporter standard configuration in documentation.</p>"},{"location":"telemetry/#local","title":"Local","text":"<p>Use the <code>npm run telemetry -- --target=local</code> command to automate the process of setting up a local telemetry pipeline, including configuring the necessary settings in your <code>.gemini/settings.json</code> file. The underlying script installs <code>otelcol-contrib</code> (the OpenTelemetry Collector) and <code>jaeger</code> (The Jaeger UI for viewing traces). To use it:</p> <ol> <li> <p>Run the command:     Execute the command from the root of the repository:</p> <p><code>bash npm run telemetry -- --target=local</code></p> <p>The script will: - Download Jaeger and OTEL if needed. - Start a local Jaeger instance. - Start an OTEL collector configured to receive data from Gemini CLI. - Automatically enable telemetry in your workspace settings. - On exit, disable telemetry.</p> </li> <li> <p>View traces:     Open your web browser and navigate to http://localhost:16686 to access the Jaeger UI. Here you can inspect detailed traces of Gemini CLI operations.</p> </li> <li> <p>Inspect logs and metrics:     The script redirects the OTEL collector output (which includes logs and metrics) to <code>~/.gemini/tmp/&lt;projectHash&gt;/otel/collector.log</code>. The script will provide links to view and a command to tail your telemetry data (traces, metrics, logs) locally.</p> </li> <li> <p>Stop the services:     Press <code>Ctrl+C</code> in the terminal where the script is running to stop the OTEL Collector and Jaeger services.</p> </li> </ol>"},{"location":"telemetry/#google-cloud","title":"Google Cloud","text":"<p>Use the <code>npm run telemetry -- --target=gcp</code> command to automate setting up a local OpenTelemetry collector that forwards data to your Google Cloud project, including configuring the necessary settings in your <code>.gemini/settings.json</code> file. The underlying script installs <code>otelcol-contrib</code>. To use it:</p> <ol> <li> <p>Prerequisites:</p> <ul> <li>Have a Google Cloud project ID.</li> <li>Export the <code>GOOGLE_CLOUD_PROJECT</code> environment variable to make it available to the OTEL collector.   <code>bash   export OTLP_GOOGLE_CLOUD_PROJECT=\"your-project-id\"</code></li> <li>Authenticate with Google Cloud (e.g., run <code>gcloud auth application-default login</code> or ensure <code>GOOGLE_APPLICATION_CREDENTIALS</code> is set).</li> <li>Ensure your Google Cloud account/service account has the necessary IAM roles: \"Cloud Trace Agent\", \"Monitoring Metric Writer\", and \"Logs Writer\".</li> </ul> </li> <li> <p>Run the command:     Execute the command from the root of the repository:</p> <p><code>bash npm run telemetry -- --target=gcp</code></p> <p>The script will: - Download the <code>otelcol-contrib</code> binary if needed. - Start an OTEL collector configured to receive data from Gemini CLI and export it to your specified Google Cloud project. - Automatically enable telemetry and disable sandbox mode in your workspace settings (<code>.gemini/settings.json</code>). - Provide direct links to view traces, metrics, and logs in your Google Cloud Console. - On exit (Ctrl+C), it will attempt to restore your original telemetry and sandbox settings.</p> </li> <li> <p>Run Gemini CLI:     In a separate terminal, run your Gemini CLI commands. This generates telemetry data that the collector captures.</p> </li> <li> <p>View telemetry in Google Cloud:     Use the links provided by the script to navigate to the Google Cloud Console and view your traces, metrics, and logs.</p> </li> <li> <p>Inspect local collector logs:     The script redirects the local OTEL collector output to <code>~/.gemini/tmp/&lt;projectHash&gt;/otel/collector-gcp.log</code>. The script provides links to view and command to tail your collector logs locally.</p> </li> <li> <p>Stop the service:     Press <code>Ctrl+C</code> in the terminal where the script is running to stop the OTEL Collector.</p> </li> </ol>"},{"location":"telemetry/#logs-and-metric-reference","title":"Logs and metric reference","text":"<p>The following section describes the structure of logs and metrics generated for Gemini CLI.</p> <ul> <li>A <code>sessionId</code> is included as a common attribute on all logs and metrics.</li> </ul>"},{"location":"telemetry/#logs","title":"Logs","text":"<p>Logs are timestamped records of specific events. The following events are logged for Gemini CLI:</p> <ul> <li><code>gemini_cli.config</code>: This event occurs once at startup with the CLI's configuration.</li> <li> <p>Attributes:</p> <ul> <li><code>model</code> (string)</li> <li><code>embedding_model</code> (string)</li> <li><code>sandbox_enabled</code> (boolean)</li> <li><code>core_tools_enabled</code> (string)</li> <li><code>approval_mode</code> (string)</li> <li><code>api_key_enabled</code> (boolean)</li> <li><code>vertex_ai_enabled</code> (boolean)</li> <li><code>code_assist_enabled</code> (boolean)</li> <li><code>log_prompts_enabled</code> (boolean)</li> <li><code>file_filtering_respect_git_ignore</code> (boolean)</li> <li><code>debug_mode</code> (boolean)</li> <li><code>mcp_servers</code> (string)</li> </ul> </li> <li> <p><code>gemini_cli.user_prompt</code>: This event occurs when a user submits a prompt.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>prompt_length</code></li> <li><code>prompt</code> (this attribute is excluded if <code>log_prompts_enabled</code> is configured to be <code>false</code>)</li> </ul> </li> <li> <p><code>gemini_cli.tool_call</code>: This event occurs for each function call.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>function_name</code></li> <li><code>function_args</code></li> <li><code>duration_ms</code></li> <li><code>success</code> (boolean)</li> <li><code>decision</code> (string: \"accept\", \"reject\", or \"modify\", if applicable)</li> <li><code>error</code> (if applicable)</li> <li><code>error_type</code> (if applicable)</li> </ul> </li> <li> <p><code>gemini_cli.api_request</code>: This event occurs when making a request to Gemini API.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>model</code></li> <li><code>request_text</code> (if applicable)</li> </ul> </li> <li> <p><code>gemini_cli.api_error</code>: This event occurs if the API request fails.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>model</code></li> <li><code>error</code></li> <li><code>error_type</code></li> <li><code>status_code</code></li> <li><code>duration_ms</code></li> </ul> </li> <li> <p><code>gemini_cli.api_response</code>: This event occurs upon receiving a response from Gemini API.</p> </li> <li>Attributes:<ul> <li><code>model</code></li> <li><code>status_code</code></li> <li><code>duration_ms</code></li> <li><code>error</code> (optional)</li> <li><code>input_token_count</code></li> <li><code>output_token_count</code></li> <li><code>cached_content_token_count</code></li> <li><code>thoughts_token_count</code></li> <li><code>tool_token_count</code></li> <li><code>response_text</code> (if applicable)</li> </ul> </li> </ul>"},{"location":"telemetry/#metrics","title":"Metrics","text":"<p>Metrics are numerical measurements of behavior over time. The following metrics are collected for Gemini CLI:</p> <ul> <li> <p><code>gemini_cli.session.count</code> (Counter, Int): Incremented once per CLI startup.</p> </li> <li> <p><code>gemini_cli.tool.call.count</code> (Counter, Int): Counts tool calls.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>function_name</code></li> <li><code>success</code> (boolean)</li> <li><code>decision</code> (string: \"accept\", \"reject\", or \"modify\", if applicable)</li> </ul> </li> <li> <p><code>gemini_cli.tool.call.latency</code> (Histogram, ms): Measures tool call latency.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>function_name</code></li> <li><code>decision</code> (string: \"accept\", \"reject\", or \"modify\", if applicable)</li> </ul> </li> <li> <p><code>gemini_cli.api.request.count</code> (Counter, Int): Counts all API requests.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>model</code></li> <li><code>status_code</code></li> <li><code>error_type</code> (if applicable)</li> </ul> </li> <li> <p><code>gemini_cli.api.request.latency</code> (Histogram, ms): Measures API request latency.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>model</code></li> </ul> </li> <li> <p><code>gemini_cli.token.usage</code> (Counter, Int): Counts the number of tokens used.</p> </li> <li> <p>Attributes:</p> <ul> <li><code>model</code></li> <li><code>type</code> (string: \"input\", \"output\", \"thought\", \"cache\", or \"tool\")</li> </ul> </li> <li> <p><code>gemini_cli.file.operation.count</code> (Counter, Int): Counts file operations.</p> </li> <li>Attributes:<ul> <li><code>operation</code> (string: \"create\", \"read\", \"update\"): The type of file operation.</li> <li><code>lines</code> (Int, if applicable): Number of lines in the file.</li> <li><code>mimetype</code> (string, if applicable): Mimetype of the file.</li> <li><code>extension</code> (string, if applicable): File extension of the file.</li> </ul> </li> </ul>"},{"location":"tos-privacy/","title":"Gemini CLI: Terms of Service and Privacy Notice","text":"<p>Gemini CLI is an open-source tool that lets you interact with Google's powerful language models directly from your command-line interface. The Terms of Service and Privacy Notices that apply to your usage of the Gemini CLI depend on the type of account you use to authenticate with Google.</p> <p>This article outlines the specific terms and privacy policies applicable for different account types and authentication methods. Note: See quotas and pricing for the quota and pricing details that apply to your usage of the Gemini CLI.</p>"},{"location":"tos-privacy/#how-to-determine-your-authentication-method","title":"How to determine your authentication method","text":"<p>Your authentication method refers to the method you use to log into and access the Gemini CLI. There are four ways to authenticate:</p> <ul> <li>Logging in with your Google account to Gemini Code Assist for Individuals</li> <li>Logging in with your Google account to Gemini Code Assist for Workspace, Standard, or Enterprise Users</li> <li>Using an API key with Gemini Developer</li> <li>Using an API key with Vertex AI GenAI API</li> </ul> <p>For each of these four methods of authentication, different Terms of Service and Privacy Notices may apply.</p> Authentication Account Terms of Service Privacy Notice Gemini Code Assist via Google Individual Google Terms of Service Gemini Code Assist Privacy Notice for Individuals Gemini Code Assist via Google Standard/Enterprise Google Cloud Platform Terms of Service Gemini Code Assist Privacy Notice for Standard and Enterprise Gemini Developer API Unpaid Gemini API Terms of Service - Unpaid Services Google Privacy Policy Gemini Developer API Paid Gemini API Terms of Service - Paid Services Google Privacy Policy Vertex AI Gen API Google Cloud Platform Service Terms Google Cloud Privacy Notice"},{"location":"tos-privacy/#1-if-you-have-logged-in-with-your-google-account-to-gemini-code-assist-for-individuals","title":"1. If you have logged in with your Google account to Gemini Code Assist for Individuals","text":"<p>For users who use their Google account to access Gemini Code Assist for Individuals, these Terms of Service and Privacy Notice documents apply:</p> <ul> <li>Terms of Service: Your use of the Gemini CLI is governed by the Google Terms of Service.</li> <li>Privacy Notice: The collection and use of your data is described in the Gemini Code Assist Privacy Notice for Individuals.</li> </ul>"},{"location":"tos-privacy/#2-if-you-have-logged-in-with-your-google-account-to-gemini-code-assist-for-workspace-standard-or-enterprise-users","title":"2. If you have logged in with your Google account to Gemini Code Assist for Workspace, Standard, or Enterprise Users","text":"<p>For users who use their Google account to access the Standard or Enterprise edition of Gemini Code Assist, these Terms of Service and Privacy Notice documents apply:</p> <ul> <li>Terms of Service: Your use of the Gemini CLI is governed by the Google Cloud Platform Terms of Service.</li> <li>Privacy Notice: The collection and use of your data is described in the Gemini Code Assist Privacy Notices for Standard and Enterprise Users.</li> </ul>"},{"location":"tos-privacy/#3-if-you-have-logged-in-with-a-gemini-api-key-to-the-gemini-developer-api","title":"3. If you have logged in with a Gemini API key to the Gemini Developer API","text":"<p>If you are using a Gemini API key for authentication with the Gemini Developer API, these Terms of Service and Privacy Notice documents apply:</p> <ul> <li>Terms of Service: Your use of the Gemini CLI is governed by the Gemini API Terms of Service. These terms may differ depending on whether you are using an unpaid or paid service:</li> <li>For unpaid services, refer to the Gemini API Terms of Service - Unpaid Services.</li> <li>For paid services, refer to the Gemini API Terms of Service - Paid Services.</li> <li>Privacy Notice: The collection and use of your data is described in the Google Privacy Policy.</li> </ul>"},{"location":"tos-privacy/#4-if-you-have-logged-in-with-a-gemini-api-key-to-the-vertex-ai-genai-api","title":"4. If you have logged in with a Gemini API key to the Vertex AI GenAI API","text":"<p>If you are using a Gemini API key for authentication with a Vertex AI GenAI API backend, these Terms of Service and Privacy Notice documents apply:</p> <ul> <li>Terms of Service: Your use of the Gemini CLI is governed by the Google Cloud Platform Service Terms.</li> <li>Privacy Notice: The collection and use of your data is described in the Google Cloud Privacy Notice.</li> </ul>"},{"location":"tos-privacy/#usage-statistics-opt-out","title":"Usage Statistics Opt-Out","text":"<p>You may opt-out from sending Usage Statistics to Google by following the instructions available here: Usage Statistics Configuration.</p>"},{"location":"tos-privacy/#frequently-asked-questions-faq-for-the-gemini-cli","title":"Frequently Asked Questions (FAQ) for the Gemini CLI","text":""},{"location":"tos-privacy/#1-is-my-code-including-prompts-and-answers-used-to-train-googles-models","title":"1. Is my code, including prompts and answers, used to train Google's models?","text":"<p>Whether your code, including prompts and answers, is used to train Google's models depends on the type of authentication method you use and your account type.</p> <ul> <li>Google account with Gemini Code Assist for Individuals: Yes. When you use your personal Google account, the Gemini Code Assist Privacy Notice for Individuals applies. Under this notice,   your prompts, answers, and related code are collected and may be used to improve Google's products, including for model training.</li> <li>Google account with Gemini Code Assist for Workspace, Standard, or Enterprise: No. For these accounts, your data is governed by the Gemini Code Assist Privacy Notices terms, which treat your inputs as confidential. Your prompts, answers, and related code are not collected and are not used to train models.</li> <li>Gemini API key via the Gemini Developer API: Whether your code is collected or used depends on whether you are using an unpaid or paid service.</li> <li>Unpaid services: Yes. When you use the Gemini API key via the Gemini Developer API with an unpaid service, the Gemini API Terms of Service - Unpaid Services terms apply. Under this notice, your prompts, answers, and related code are collected and may be used to improve Google's products, including for model training.</li> <li>Paid services: No. When you use the Gemini API key via the Gemini Developer API with a paid service, the Gemini API Terms of Service - Paid Services terms apply, which treats your inputs as confidential. Your prompts, answers, and related code are not collected and are not used to train models.</li> <li>Gemini API key via the Vertex AI GenAI API: No. For these accounts, your data is governed by the Google Cloud Privacy Notice terms, which treat your inputs as confidential. Your prompts, answers, and related code are not collected and are not used to train models.</li> </ul>"},{"location":"tos-privacy/#2-what-are-usage-statistics-and-what-does-the-opt-out-control","title":"2. What are Usage Statistics and what does the opt-out control?","text":"<p>The Usage Statistics setting is the single control for all optional data collection in the Gemini CLI.</p> <p>The data it collects depends on your account and authentication type:</p> <ul> <li>Google account with Gemini Code Assist for Individuals: When enabled, this setting allows Google to collect both anonymous telemetry (for example, commands run and performance metrics) and your prompts and answers for model improvement.</li> <li>Google account with Gemini Code Assist for Workspace, Standard, or Enterprise: This setting only controls the collection of anonymous telemetry. Your prompts and answers are never collected, regardless of this setting.</li> <li>Gemini API key via the Gemini Developer API:   Unpaid services: When enabled, this setting allows Google to collect both anonymous telemetry (like commands run and performance metrics) and your prompts and answers for model improvement. When disabled we will use your data as described in How Google Uses Your Data.   Paid services: This setting only controls the collection of anonymous telemetry. Google logs prompts and responses for a limited period of time, solely for the purpose of detecting violations of the Prohibited Use Policy and any required legal or regulatory disclosures.</li> <li>Gemini API key via the Vertex AI GenAI API: This setting only controls the collection of anonymous telemetry. Your prompts and answers are never collected, regardless of this setting.</li> </ul> <p>You can disable Usage Statistics for any account type by following the instructions in the Usage Statistics Configuration documentation.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues and debugging tips.</p>"},{"location":"troubleshooting/#authentication","title":"Authentication","text":"<ul> <li>Error: <code>Failed to login. Message: Request contains an invalid argument</code></li> <li>Users with Google Workspace accounts, or users with Google Cloud accounts     associated with their Gmail accounts may not be able to activate the free     tier of the Google Code Assist plan.</li> <li>For Google Cloud accounts, you can work around this by setting     <code>GOOGLE_CLOUD_PROJECT</code> to your project ID.</li> <li>You can also grab an API key from AI Studio, which also includes a     separate free tier.</li> </ul>"},{"location":"troubleshooting/#frequently-asked-questions-faqs","title":"Frequently asked questions (FAQs)","text":"<ul> <li>Q: How do I update Gemini CLI to the latest version?</li> <li> <p>A: If installed globally via npm, update Gemini CLI using the command <code>npm install -g @google/gemini-cli@latest</code>. If run from source, pull the latest changes from the repository and rebuild using <code>npm run build</code>.</p> </li> <li> <p>Q: Where are Gemini CLI configuration files stored?</p> </li> <li> <p>A: The CLI configuration is stored within two <code>settings.json</code> files: one in your home directory and one in your project's root directory. In both locations, <code>settings.json</code> is found in the <code>.gemini/</code> folder. Refer to CLI Configuration for more details.</p> </li> <li> <p>Q: Why don't I see cached token counts in my stats output?</p> </li> <li>A: Cached token information is only displayed when cached tokens are being used. This feature is available for API key users (Gemini API key or Vertex AI) but not for OAuth users (Google Personal/Enterprise accounts) at this time, as the Code Assist API does not support cached content creation. You can still view your total token usage with the <code>/stats</code> command.</li> </ul>"},{"location":"troubleshooting/#common-error-messages-and-solutions","title":"Common error messages and solutions","text":"<ul> <li>Error: <code>EADDRINUSE</code> (Address already in use) when starting an MCP server.</li> <li>Cause: Another process is already using the port the MCP server is trying to bind to.</li> <li> <p>Solution:     Either stop the other process that is using the port or configure the MCP server to use a different port.</p> </li> <li> <p>Error: Command not found (when attempting to run Gemini CLI).</p> </li> <li>Cause: Gemini CLI is not correctly installed or not in your system's PATH.</li> <li> <p>Solution:</p> <ol> <li>Ensure Gemini CLI installation was successful.</li> <li>If installed globally, check that your npm global binary directory is in your PATH.</li> <li>If running from source, ensure you are using the correct command to invoke it (e.g., <code>node packages/cli/dist/index.js ...</code>).</li> </ol> </li> <li> <p>Error: <code>MODULE_NOT_FOUND</code> or import errors.</p> </li> <li>Cause: Dependencies are not installed correctly, or the project hasn't been built.</li> <li> <p>Solution:</p> <ol> <li>Run <code>npm install</code> to ensure all dependencies are present.</li> <li>Run <code>npm run build</code> to compile the project.</li> </ol> </li> <li> <p>Error: \"Operation not permitted\", \"Permission denied\", or similar.</p> </li> <li>Cause: If sandboxing is enabled, then the application is likely attempting an operation restricted by your sandbox, such as writing outside the project directory or system temp directory.</li> <li> <p>Solution: See Sandboxing for more information, including how to customize your sandbox configuration.</p> </li> <li> <p>CLI is not interactive in \"CI\" environments</p> </li> <li>Issue: The CLI does not enter interactive mode (no prompt appears) if an environment variable starting with <code>CI_</code> (e.g., <code>CI_TOKEN</code>) is set. This is because the <code>is-in-ci</code> package, used by the underlying UI framework, detects these variables and assumes a non-interactive CI environment.</li> <li>Cause: The <code>is-in-ci</code> package checks for the presence of <code>CI</code>, <code>CONTINUOUS_INTEGRATION</code>, or any environment variable with a <code>CI_</code> prefix. When any of these are found, it signals that the environment is non-interactive, which prevents the CLI from starting in its interactive mode.</li> <li>Solution: If the <code>CI_</code> prefixed variable is not needed for the CLI to function, you can temporarily unset it for the command. e.g., <code>env -u CI_TOKEN gemini</code></li> </ul>"},{"location":"troubleshooting/#debugging-tips","title":"Debugging Tips","text":"<ul> <li>CLI debugging:</li> <li>Use the <code>--verbose</code> flag (if available) with CLI commands for more detailed output.</li> <li> <p>Check the CLI logs, often found in a user-specific configuration or cache directory.</p> </li> <li> <p>Core debugging:</p> </li> <li>Check the server console output for error messages or stack traces.</li> <li>Increase log verbosity if configurable.</li> <li> <p>Use Node.js debugging tools (e.g., <code>node --inspect</code>) if you need to step through server-side code.</p> </li> <li> <p>Tool issues:</p> </li> <li>If a specific tool is failing, try to isolate the issue by running the simplest possible version of the command or operation the tool performs.</li> <li>For <code>run_shell_command</code>, check that the command works directly in your shell first.</li> <li> <p>For file system tools, double-check paths and permissions.</p> </li> <li> <p>Pre-flight checks:</p> </li> <li>Always run <code>npm run preflight</code> before committing code. This can catch many common issues related to formatting, linting, and type errors.</li> </ul> <p>If you encounter an issue not covered here, consider searching the project's issue tracker on GitHub or reporting a new issue with detailed information.</p>"},{"location":"cli/","title":"Gemini CLI","text":"<p>Within Gemini CLI, <code>packages/cli</code> is the frontend for users to send and receive prompts with the Gemini AI model and its associated tools. For a general overview of Gemini CLI, see the main documentation page.</p>"},{"location":"cli/#navigating-this-section","title":"Navigating this section","text":"<ul> <li>Authentication: A guide to setting up authentication with Google's AI services.</li> <li>Commands: A reference for Gemini CLI commands (e.g., <code>/help</code>, <code>/tools</code>, <code>/theme</code>).</li> <li>Configuration: A guide to tailoring Gemini CLI behavior using configuration files.</li> <li>Token Caching: Optimize API costs through token caching.</li> <li>Themes: A guide to customizing the CLI's appearance with different themes.</li> <li>Tutorials: A tutorial showing how to use Gemini CLI to automate a development task.</li> </ul>"},{"location":"cli/#non-interactive-mode","title":"Non-interactive mode","text":"<p>Gemini CLI can be run in a non-interactive mode, which is useful for scripting and automation. In this mode, you pipe input to the CLI, it executes the command, and then it exits.</p> <p>The following example pipes a command to Gemini CLI from your terminal:</p> <pre><code>echo \"What is fine tuning?\" | gemini\n</code></pre> <p>Gemini CLI executes the command and prints the output to your terminal. Note that you can achieve the same behavior by using the <code>--prompt</code> or <code>-p</code> flag. For example:</p> <pre><code>gemini -p \"What is fine tuning?\"\n</code></pre>"},{"location":"cli/authentication/","title":"Authentication Setup","text":"<p>The Gemini CLI requires you to authenticate with Google's AI services. On initial startup you'll need to configure one of the following authentication methods:</p> <ol> <li> <p>Login with Google (Gemini Code Assist):</p> <ul> <li>Use this option to log in with your google account.</li> <li>During initial startup, Gemini CLI will direct you to a webpage for authentication. Once authenticated, your credentials will be cached locally so the web login can be skipped on subsequent runs.</li> <li>Note that the web login must be done in a browser that can communicate with the machine Gemini CLI is being run from. (Specifically, the browser will be redirected to a localhost url that Gemini CLI will be listening on).</li> <li>Users may have to specify a GOOGLE_CLOUD_PROJECT if:</li> <li>You have a Google Workspace account. Google Workspace is a paid service for businesses and organizations that provides a suite of productivity tools, including a custom email domain (e.g. your-name@your-company.com), enhanced security features, and administrative controls. These accounts are often managed by an employer or school.</li> <li>You have received a free Code Assist license through the Google Developer Program (including qualified Google Developer Experts)</li> <li>You have been assigned a license to a current Gemini Code Assist standard or enterprise subscription.</li> <li>You are using the product outside the supported regions for free individual usage.&gt;</li> <li>You are a Google account holder under the age of 18</li> <li>If you fall into one of these categories, you must first configure a Google Cloud Project Id to use, enable the Gemini for Cloud API and configure access permissions.</li> </ul> <p>You can temporarily set the environment variable in your current shell session using the following command:</p> <p><code>bash   export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"</code>   - For repeated use, you can add the environment variable to your .env file or your shell's configuration file (like <code>~/.bashrc</code>, <code>~/.zshrc</code>, or <code>~/.profile</code>). For example, the following command adds the environment variable to a <code>~/.bashrc</code> file:</p> <p><code>bash   echo 'export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"' &gt;&gt; ~/.bashrc   source ~/.bashrc</code></p> </li> <li> <p>Gemini API key:</p> <ul> <li>Obtain your API key from Google AI Studio: https://aistudio.google.com/app/apikey</li> <li>Set the <code>GEMINI_API_KEY</code> environment variable. In the following methods, replace <code>YOUR_GEMINI_API_KEY</code> with the API key you obtained from Google AI Studio:</li> <li>You can temporarily set the environment variable in your current shell session using the following command:     <code>bash     export GEMINI_API_KEY=\"YOUR_GEMINI_API_KEY\"</code></li> <li>For repeated use, you can add the environment variable to your .env file or your shell's configuration file (like <code>~/.bashrc</code>, <code>~/.zshrc</code>, or <code>~/.profile</code>). For example, the following command adds the environment variable to a <code>~/.bashrc</code> file:     <code>bash     echo 'export GEMINI_API_KEY=\"YOUR_GEMINI_API_KEY\"' &gt;&gt; ~/.bashrc     source ~/.bashrc</code></li> </ul> </li> <li> <p>Vertex AI:</p> <ul> <li>If not using express mode:</li> <li>Ensure you have a Google Cloud project and have enabled the Vertex AI API.</li> <li>Set up Application Default Credentials (ADC), using the following command:     <code>bash     gcloud auth application-default login</code>     For more information, see Set up Application Default Credentials for Google Cloud.</li> <li>Set the <code>GOOGLE_CLOUD_PROJECT</code> and <code>GOOGLE_CLOUD_LOCATION</code> environment variables. In the following methods, replace <code>YOUR_PROJECT_ID</code> and <code>YOUR_PROJECT_LOCATION</code> with the relevant values for your project:<ul> <li>You can temporarily set these environment variables in your current shell session using the following commands:   <code>bash   export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"   export GOOGLE_CLOUD_LOCATION=\"YOUR_PROJECT_LOCATION\" # e.g., us-central1</code></li> <li>For repeated use, you can add the environment variables to your .env file or your shell's configuration file (like <code>~/.bashrc</code>, <code>~/.zshrc</code>, or <code>~/.profile</code>). For example, the following commands add the environment variables to a <code>~/.bashrc</code> file:   <code>bash   echo 'export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"' &gt;&gt; ~/.bashrc   echo 'export GOOGLE_CLOUD_LOCATION=\"YOUR_PROJECT_LOCATION\"' &gt;&gt; ~/.bashrc   source ~/.bashrc</code></li> </ul> </li> <li>If using express mode:</li> <li>Set the <code>GOOGLE_API_KEY</code> environment variable. In the following methods, replace <code>YOUR_GOOGLE_API_KEY</code> with your Vertex AI API key provided by express mode:<ul> <li>You can temporarily set these environment variables in your current shell session using the following commands:   <code>bash   export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\"</code></li> <li>For repeated use, you can add the environment variables to your .env file or your shell's configuration file (like <code>~/.bashrc</code>, <code>~/.zshrc</code>, or <code>~/.profile</code>). For example, the following commands add the environment variables to a <code>~/.bashrc</code> file:   <code>bash   echo 'export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\"' &gt;&gt; ~/.bashrc   source ~/.bashrc</code></li> </ul> </li> </ul> </li> <li>Cloud Shell:<ul> <li>This option is only available when running in a Google Cloud Shell environment.</li> <li>It automatically uses the credentials of the logged-in user in the Cloud Shell environment.</li> <li>This is the default authentication method when running in Cloud Shell and no other method is configured.</li> </ul> </li> </ol>"},{"location":"cli/authentication/#persisting-environment-variables-with-env-files","title":"Persisting Environment Variables with <code>.env</code> Files","text":"<p>You can create a <code>.gemini/.env</code> file in your project directory or in your home directory. Creating a plain <code>.env</code> file also works, but <code>.gemini/.env</code> is recommended to keep Gemini variables isolated from other tools.</p> <p>Gemini CLI automatically loads environment variables from the first <code>.env</code> file it finds, using the following search order:</p> <ol> <li>Starting in the current directory and moving upward toward <code>/</code>, for each directory it checks:</li> <li><code>.gemini/.env</code></li> <li><code>.env</code></li> <li>If no file is found, it falls back to your home directory:</li> <li><code>~/.gemini/.env</code></li> <li><code>~/.env</code></li> </ol> <p>Important: The search stops at the first file encountered\u2014variables are not merged across multiple files.</p>"},{"location":"cli/authentication/#examples","title":"Examples","text":"<p>Project-specific overrides (take precedence when you are inside the project):</p> <pre><code>mkdir -p .gemini\necho 'GOOGLE_CLOUD_PROJECT=\"your-project-id\"' &gt;&gt; .gemini/.env\n</code></pre> <p>User-wide settings (available in every directory):</p> <pre><code>mkdir -p ~/.gemini\ncat &gt;&gt; ~/.gemini/.env &lt;&lt;'EOF'\nGOOGLE_CLOUD_PROJECT=\"your-project-id\"\nGEMINI_API_KEY=\"your-gemini-api-key\"\nEOF\n</code></pre>"},{"location":"cli/commands/","title":"CLI Commands","text":"<p>Gemini CLI supports several built-in commands to help you manage your session, customize the interface, and control its behavior. These commands are prefixed with a forward slash (<code>/</code>), an at symbol (<code>@</code>), or an exclamation mark (<code>!</code>).</p>"},{"location":"cli/commands/#slash-commands","title":"Slash commands (<code>/</code>)","text":"<p>Slash commands provide meta-level control over the CLI itself.</p> <ul> <li><code>/bug</code></li> <li> <p>Description: File an issue about Gemini CLI. By default, the issue is filed within the GitHub repository for Gemini CLI. The string you enter after <code>/bug</code> will become the headline for the bug being filed. The default <code>/bug</code> behavior can be modified using the <code>bugCommand</code> setting in your <code>.gemini/settings.json</code> files.</p> </li> <li> <p><code>/chat</code></p> </li> <li>Description: Save and resume conversation history for branching conversation state interactively, or resuming a previous state from a later session.</li> <li> <p>Sub-commands:</p> <ul> <li><code>save</code></li> <li>Description: Saves the current conversation history. You must add a <code>&lt;tag&gt;</code> for identifying the conversation state.</li> <li>Usage: <code>/chat save &lt;tag&gt;</code></li> <li><code>resume</code></li> <li>Description: Resumes a conversation from a previous save.</li> <li>Usage: <code>/chat resume &lt;tag&gt;</code></li> <li><code>list</code></li> <li>Description: Lists available tags for chat state resumption.</li> </ul> </li> <li> <p><code>/clear</code></p> </li> <li>Description: Clear the terminal screen, including the visible session history and scrollback within the CLI. The underlying session data (for history recall) might be preserved depending on the exact implementation, but the visual display is cleared.</li> <li> <p>Keyboard shortcut: Press Ctrl+L at any time to perform a clear action.</p> </li> <li> <p><code>/compress</code></p> </li> <li> <p>Description: Replace the entire chat context with a summary. This saves on tokens used for future tasks while retaining a high level summary of what has happened.</p> </li> <li> <p><code>/editor</code></p> </li> <li> <p>Description: Open a dialog for selecting supported editors.</p> </li> <li> <p><code>/help</code> (or <code>/?</code>)</p> </li> <li> <p>Description: Display help information about the Gemini CLI, including available commands and their usage.</p> </li> <li> <p><code>/mcp</code></p> </li> <li>Description: List configured Model Context Protocol (MCP) servers, their connection status, server details, and available tools.</li> <li>Sub-commands:<ul> <li><code>desc</code> or <code>descriptions</code>:</li> <li>Description: Show detailed descriptions for MCP servers and tools.</li> <li><code>nodesc</code> or <code>nodescriptions</code>:</li> <li>Description: Hide tool descriptions, showing only the tool names.</li> <li><code>schema</code>:</li> <li>Description: Show the full JSON schema for the tool's configured parameters.</li> </ul> </li> <li> <p>Keyboard Shortcut: Press Ctrl+T at any time to toggle between showing and hiding tool descriptions.</p> </li> <li> <p><code>/memory</code></p> </li> <li>Description: Manage the AI's instructional context (hierarchical memory loaded from <code>GEMINI.md</code> files).</li> <li> <p>Sub-commands:</p> <ul> <li><code>add</code>:</li> <li>Description: Adds the following text to the AI's memory. Usage: <code>/memory add &lt;text to remember&gt;</code></li> <li><code>show</code>:</li> <li>Description: Display the full, concatenated content of the current hierarchical memory that has been loaded from all <code>GEMINI.md</code> files. This lets you inspect the instructional context being provided to the Gemini model.</li> <li><code>refresh</code>:</li> <li>Description: Reload the hierarchical instructional memory from all <code>GEMINI.md</code> files found in the configured locations (global, project/ancestors, and sub-directories). This command updates the model with the latest <code>GEMINI.md</code> content.</li> <li>Note: For more details on how <code>GEMINI.md</code> files contribute to hierarchical memory, see the CLI Configuration documentation.</li> </ul> </li> <li> <p><code>/restore</code></p> </li> <li>Description: Restores the project files to the state they were in just before a tool was executed. This is particularly useful for undoing file edits made by a tool. If run without a tool call ID, it will list available checkpoints to restore from.</li> <li>Usage: <code>/restore [tool_call_id]</code></li> <li> <p>Note: Only available if the CLI is invoked with the <code>--checkpointing</code> option or configured via settings. See Checkpointing documentation for more details.</p> </li> <li> <p><code>/stats</code></p> </li> <li> <p>Description: Display detailed statistics for the current Gemini CLI session, including token usage, cached token savings (when available), and session duration. Note: Cached token information is only displayed when cached tokens are being used, which occurs with API key authentication but not with OAuth authentication at this time.</p> </li> <li> <p><code>/theme</code></p> </li> <li> <p>Description: Open a dialog that lets you change the visual theme of Gemini CLI.</p> </li> <li> <p><code>/auth</code></p> </li> <li> <p>Description: Open a dialog that lets you change the authentication method.</p> </li> <li> <p><code>/about</code></p> </li> <li> <p>Description: Show version info. Please share this information when filing issues.</p> </li> <li> <p><code>/tools</code></p> </li> <li>Description: Display a list of tools that are currently available within Gemini CLI.</li> <li> <p>Sub-commands:</p> <ul> <li><code>desc</code> or <code>descriptions</code>:</li> <li>Description: Show detailed descriptions of each tool, including each tool's name with its full description as provided to the model.</li> <li><code>nodesc</code> or <code>nodescriptions</code>:</li> <li>Description: Hide tool descriptions, showing only the tool names.</li> </ul> </li> <li> <p><code>/quit</code> (or <code>/exit</code>)</p> </li> <li>Description: Exit Gemini CLI.</li> </ul>"},{"location":"cli/commands/#at-commands","title":"At commands (<code>@</code>)","text":"<p>At commands are used to include the content of files or directories as part of your prompt to Gemini. These commands include git-aware filtering.</p> <ul> <li><code>@&lt;path_to_file_or_directory&gt;</code></li> <li>Description: Inject the content of the specified file or files into your current prompt. This is useful for asking questions about specific code, text, or collections of files.</li> <li>Examples:<ul> <li><code>@path/to/your/file.txt Explain this text.</code></li> <li><code>@src/my_project/ Summarize the code in this directory.</code></li> <li><code>What is this file about? @README.md</code></li> </ul> </li> <li>Details:<ul> <li>If a path to a single file is provided, the content of that file is read.</li> <li>If a path to a directory is provided, the command attempts to read the content of files within that directory and any subdirectories.</li> <li>Spaces in paths should be escaped with a backslash (e.g., <code>@My\\ Documents/file.txt</code>).</li> <li>The command uses the <code>read_many_files</code> tool internally. The content is fetched and then inserted into your query before being sent to the Gemini model.</li> <li>Git-aware filtering: By default, git-ignored files (like <code>node_modules/</code>, <code>dist/</code>, <code>.env</code>, <code>.git/</code>) are excluded. This behavior can be changed via the <code>fileFiltering</code> settings.</li> <li>File types: The command is intended for text-based files. While it might attempt to read any file, binary files or very large files might be skipped or truncated by the underlying <code>read_many_files</code> tool to ensure performance and relevance. The tool indicates if files were skipped.</li> </ul> </li> <li> <p>Output: The CLI will show a tool call message indicating that <code>read_many_files</code> was used, along with a message detailing the status and the path(s) that were processed.</p> </li> <li> <p><code>@</code> (Lone at symbol)</p> </li> <li>Description: If you type a lone <code>@</code> symbol without a path, the query is passed as-is to the Gemini model. This might be useful if you are specifically talking about the <code>@</code> symbol in your prompt.</li> </ul>"},{"location":"cli/commands/#error-handling-for-commands","title":"Error handling for <code>@</code> commands","text":"<ul> <li>If the path specified after <code>@</code> is not found or is invalid, an error message will be displayed, and the query might not be sent to the Gemini model, or it will be sent without the file content.</li> <li>If the <code>read_many_files</code> tool encounters an error (e.g., permission issues), this will also be reported.</li> </ul>"},{"location":"cli/commands/#shell-mode-passthrough-commands","title":"Shell mode &amp; passthrough commands (<code>!</code>)","text":"<p>The <code>!</code> prefix lets you interact with your system's shell directly from within Gemini CLI.</p> <ul> <li><code>!&lt;shell_command&gt;</code></li> <li>Description: Execute the given <code>&lt;shell_command&gt;</code> in your system's default shell. Any output or errors from the command are displayed in the terminal.</li> <li> <p>Examples:</p> <ul> <li><code>!ls -la</code> (executes <code>ls -la</code> and returns to Gemini CLI)</li> <li><code>!git status</code> (executes <code>git status</code> and returns to Gemini CLI)</li> </ul> </li> <li> <p><code>!</code> (Toggle shell mode)</p> </li> <li> <p>Description: Typing <code>!</code> on its own toggles shell mode.</p> <ul> <li>Entering shell mode:</li> <li>When active, shell mode uses a different coloring and a \"Shell Mode Indicator\".</li> <li>While in shell mode, text you type is interpreted directly as a shell command.</li> <li>Exiting shell mode:</li> <li>When exited, the UI reverts to its standard appearance and normal Gemini CLI behavior resumes.</li> </ul> </li> <li> <p>Caution for all <code>!</code> usage: Commands you execute in shell mode have the same permissions and impact as if you ran them directly in your terminal.</p> </li> </ul>"},{"location":"cli/configuration/","title":"Gemini CLI Configuration","text":"<p>Gemini CLI offers several ways to configure its behavior, including environment variables, command-line arguments, and settings files. This document outlines the different configuration methods and available settings.</p>"},{"location":"cli/configuration/#configuration-layers","title":"Configuration layers","text":"<p>Configuration is applied in the following order of precedence (lower numbers are overridden by higher numbers):</p> <ol> <li>Default values: Hardcoded defaults within the application.</li> <li>User settings file: Global settings for the current user.</li> <li>Project settings file: Project-specific settings.</li> <li>System settings file: System-wide settings.</li> <li>Environment variables: System-wide or session-specific variables, potentially loaded from <code>.env</code> files.</li> <li>Command-line arguments: Values passed when launching the CLI.</li> </ol>"},{"location":"cli/configuration/#settings-files","title":"Settings files","text":"<p>Gemini CLI uses <code>settings.json</code> files for persistent configuration. There are three locations for these files:</p> <ul> <li>User settings file:</li> <li>Location: <code>~/.gemini/settings.json</code> (where <code>~</code> is your home directory).</li> <li>Scope: Applies to all Gemini CLI sessions for the current user.</li> <li>Project settings file:</li> <li>Location: <code>.gemini/settings.json</code> within your project's root directory.</li> <li>Scope: Applies only when running Gemini CLI from that specific project. Project settings override user settings.</li> <li>System settings file:</li> <li>Location: <code>/etc/gemini-cli/settings.json</code> (Linux), <code>C:\\ProgramData\\gemini-cli\\settings.json</code> (Windows) or <code>/Library/Application Support/GeminiCli/settings.json</code> (macOS).</li> <li>Scope: Applies to all Gemini CLI sessions on the system, for all users. System settings override user and project settings. May be useful for system administrators at enterprises to have controls over users' Gemini CLI setups.</li> </ul> <p>Note on environment variables in settings: String values within your <code>settings.json</code> files can reference environment variables using either <code>$VAR_NAME</code> or <code>${VAR_NAME}</code> syntax. These variables will be automatically resolved when the settings are loaded. For example, if you have an environment variable <code>MY_API_TOKEN</code>, you could use it in <code>settings.json</code> like this: <code>\"apiKey\": \"$MY_API_TOKEN\"</code>.</p>"},{"location":"cli/configuration/#the-gemini-directory-in-your-project","title":"The <code>.gemini</code> directory in your project","text":"<p>In addition to a project settings file, a project's <code>.gemini</code> directory can contain other project-specific files related to Gemini CLI's operation, such as:</p> <ul> <li>Custom sandbox profiles (e.g., <code>.gemini/sandbox-macos-custom.sb</code>, <code>.gemini/sandbox.Dockerfile</code>).</li> </ul>"},{"location":"cli/configuration/#available-settings-in-settingsjson","title":"Available settings in <code>settings.json</code>:","text":"<ul> <li><code>contextFileName</code> (string or array of strings):</li> <li>Description: Specifies the filename for context files (e.g., <code>GEMINI.md</code>, <code>AGENTS.md</code>). Can be a single filename or a list of accepted filenames.</li> <li>Default: <code>GEMINI.md</code></li> <li> <p>Example: <code>\"contextFileName\": \"AGENTS.md\"</code></p> </li> <li> <p><code>bugCommand</code> (object):</p> </li> <li>Description: Overrides the default URL for the <code>/bug</code> command.</li> <li>Default: <code>\"urlTemplate\": \"https://github.com/google-gemini/gemini-cli/issues/new?template=bug_report.yml&amp;title={title}&amp;info={info}\"</code></li> <li>Properties:<ul> <li><code>urlTemplate</code> (string): A URL that can contain <code>{title}</code> and <code>{info}</code> placeholders.</li> </ul> </li> <li> <p>Example: <code>json     \"bugCommand\": {       \"urlTemplate\": \"https://bug.example.com/new?title={title}&amp;info={info}\"     }</code></p> </li> <li> <p><code>fileFiltering</code> (object):</p> </li> <li>Description: Controls git-aware file filtering behavior for @ commands and file discovery tools.</li> <li>Default: <code>\"respectGitIgnore\": true, \"enableRecursiveFileSearch\": true</code></li> <li>Properties:<ul> <li><code>respectGitIgnore</code> (boolean): Whether to respect .gitignore patterns when discovering files. When set to <code>true</code>, git-ignored files (like <code>node_modules/</code>, <code>dist/</code>, <code>.env</code>) are automatically excluded from @ commands and file listing operations.</li> <li><code>enableRecursiveFileSearch</code> (boolean): Whether to enable searching recursively for filenames under the current tree when completing @ prefixes in the prompt.</li> </ul> </li> <li> <p>Example: <code>json     \"fileFiltering\": {       \"respectGitIgnore\": true,       \"enableRecursiveFileSearch\": false     }</code></p> </li> <li> <p><code>coreTools</code> (array of strings):</p> </li> <li>Description: Allows you to specify a list of core tool names that should be made available to the model. This can be used to restrict the set of built-in tools. See Built-in Tools for a list of core tools. You can also specify command-specific restrictions for tools that support it, like the <code>ShellTool</code>. For example, <code>\"coreTools\": [\"ShellTool(ls -l)\"]</code> will only allow the <code>ls -l</code> command to be executed.</li> <li>Default: All tools available for use by the Gemini model.</li> <li> <p>Example: <code>\"coreTools\": [\"ReadFileTool\", \"GlobTool\", \"ShellTool(ls)\"]</code>.</p> </li> <li> <p><code>excludeTools</code> (array of strings):</p> </li> <li>Description: Allows you to specify a list of core tool names that should be excluded from the model. A tool listed in both <code>excludeTools</code> and <code>coreTools</code> is excluded. You can also specify command-specific restrictions for tools that support it, like the <code>ShellTool</code>. For example, <code>\"excludeTools\": [\"ShellTool(rm -rf)\"]</code> will block the <code>rm -rf</code> command.</li> <li>Default: No tools excluded.</li> <li>Example: <code>\"excludeTools\": [\"run_shell_command\", \"findFiles\"]</code>.</li> <li> <p>Security Note: Command-specific restrictions in     <code>excludeTools</code> for <code>run_shell_command</code> are based on simple string matching and can be easily bypassed. This feature is not a security mechanism and should not be relied upon to safely execute untrusted code. It is recommended to use <code>coreTools</code> to explicitly select commands     that can be executed.</p> </li> <li> <p><code>autoAccept</code> (boolean):</p> </li> <li>Description: Controls whether the CLI automatically accepts and executes tool calls that are considered safe (e.g., read-only operations) without explicit user confirmation. If set to <code>true</code>, the CLI will bypass the confirmation prompt for tools deemed safe.</li> <li>Default: <code>false</code></li> <li> <p>Example: <code>\"autoAccept\": true</code></p> </li> <li> <p><code>theme</code> (string):</p> </li> <li>Description: Sets the visual theme for Gemini CLI.</li> <li>Default: <code>\"Default\"</code></li> <li> <p>Example: <code>\"theme\": \"GitHub\"</code></p> </li> <li> <p><code>sandbox</code> (boolean or string):</p> </li> <li>Description: Controls whether and how to use sandboxing for tool execution. If set to <code>true</code>, Gemini CLI uses a pre-built <code>gemini-cli-sandbox</code> Docker image. For more information, see Sandboxing.</li> <li>Default: <code>false</code></li> <li> <p>Example: <code>\"sandbox\": \"docker\"</code></p> </li> <li> <p><code>toolDiscoveryCommand</code> (string):</p> </li> <li>Description: Defines a custom shell command for discovering tools from your project. The shell command must return on <code>stdout</code> a JSON array of function declarations. Tool wrappers are optional.</li> <li>Default: Empty</li> <li> <p>Example: <code>\"toolDiscoveryCommand\": \"bin/get_tools\"</code></p> </li> <li> <p><code>toolCallCommand</code> (string):</p> </li> <li>Description: Defines a custom shell command for calling a specific tool that was discovered using <code>toolDiscoveryCommand</code>. The shell command must meet the following criteria:<ul> <li>It must take function <code>name</code> (exactly as in function declaration) as first command line argument.</li> <li>It must read function arguments as JSON on <code>stdin</code>, analogous to <code>functionCall.args</code>.</li> <li>It must return function output as JSON on <code>stdout</code>, analogous to <code>functionResponse.response.content</code>.</li> </ul> </li> <li>Default: Empty</li> <li> <p>Example: <code>\"toolCallCommand\": \"bin/call_tool\"</code></p> </li> <li> <p><code>mcpServers</code> (object):</p> </li> <li>Description: Configures connections to one or more Model-Context Protocol (MCP) servers for discovering and using custom tools. Gemini CLI attempts to connect to each configured MCP server to discover available tools. If multiple MCP servers expose a tool with the same name, the tool names will be prefixed with the server alias you defined in the configuration (e.g., <code>serverAlias__actualToolName</code>) to avoid conflicts. Note that the system might strip certain schema properties from MCP tool definitions for compatibility.</li> <li>Default: Empty</li> <li>Properties:<ul> <li><code>&lt;SERVER_NAME&gt;</code> (object): The server parameters for the named server.</li> <li><code>command</code> (string, required): The command to execute to start the MCP server.</li> <li><code>args</code> (array of strings, optional): Arguments to pass to the command.</li> <li><code>env</code> (object, optional): Environment variables to set for the server process.</li> <li><code>cwd</code> (string, optional): The working directory in which to start the server.</li> <li><code>timeout</code> (number, optional): Timeout in milliseconds for requests to this MCP server.</li> <li><code>trust</code> (boolean, optional): Trust this server and bypass all tool call confirmations.</li> </ul> </li> <li> <p>Example: <code>json     \"mcpServers\": {       \"myPythonServer\": {         \"command\": \"python\",         \"args\": [\"mcp_server.py\", \"--port\", \"8080\"],         \"cwd\": \"./mcp_tools/python\",         \"timeout\": 5000       },       \"myNodeServer\": {         \"command\": \"node\",         \"args\": [\"mcp_server.js\"],         \"cwd\": \"./mcp_tools/node\"       },       \"myDockerServer\": {         \"command\": \"docker\",         \"args\": [\"run\", \"i\", \"--rm\", \"-e\", \"API_KEY\", \"ghcr.io/foo/bar\"],         \"env\": {           \"API_KEY\": \"$MY_API_TOKEN\"         }       },     }</code></p> </li> <li> <p><code>checkpointing</code> (object):</p> </li> <li>Description: Configures the checkpointing feature, which allows you to save and restore conversation and file states. See the Checkpointing documentation for more details.</li> <li>Default: <code>{\"enabled\": false}</code></li> <li> <p>Properties:</p> <ul> <li><code>enabled</code> (boolean): When <code>true</code>, the <code>/restore</code> command is available.</li> </ul> </li> <li> <p><code>preferredEditor</code> (string):</p> </li> <li>Description: Specifies the preferred editor to use for viewing diffs.</li> <li>Default: <code>vscode</code></li> <li> <p>Example: <code>\"preferredEditor\": \"vscode\"</code></p> </li> <li> <p><code>telemetry</code> (object)</p> </li> <li>Description: Configures logging and metrics collection for Gemini CLI. For more information, see Telemetry.</li> <li>Default: <code>{\"enabled\": false, \"target\": \"local\", \"otlpEndpoint\": \"http://localhost:4317\", \"logPrompts\": true}</code></li> <li>Properties:<ul> <li><code>enabled</code> (boolean): Whether or not telemetry is enabled.</li> <li><code>target</code> (string): The destination for collected telemetry. Supported values are <code>local</code> and <code>gcp</code>.</li> <li><code>otlpEndpoint</code> (string): The endpoint for the OTLP Exporter.</li> <li><code>logPrompts</code> (boolean): Whether or not to include the content of user prompts in the logs.</li> </ul> </li> <li>Example: <code>json     \"telemetry\": {       \"enabled\": true,       \"target\": \"local\",       \"otlpEndpoint\": \"http://localhost:16686\",       \"logPrompts\": false     }</code></li> <li><code>usageStatisticsEnabled</code> (boolean):</li> <li>Description: Enables or disables the collection of usage statistics. See Usage Statistics for more information.</li> <li>Default: <code>true</code></li> <li> <p>Example: <code>json     \"usageStatisticsEnabled\": false</code></p> </li> <li> <p><code>hideTips</code> (boolean):</p> </li> <li>Description: Enables or disables helpful tips in the CLI interface.</li> <li>Default: <code>false</code></li> <li> <p>Example:</p> <p><code>json \"hideTips\": true</code></p> </li> </ul>"},{"location":"cli/configuration/#example-settingsjson","title":"Example <code>settings.json</code>:","text":"<pre><code>{\n  \"theme\": \"GitHub\",\n  \"sandbox\": \"docker\",\n  \"toolDiscoveryCommand\": \"bin/get_tools\",\n  \"toolCallCommand\": \"bin/call_tool\",\n  \"mcpServers\": {\n    \"mainServer\": {\n      \"command\": \"bin/mcp_server.py\"\n    },\n    \"anotherServer\": {\n      \"command\": \"node\",\n      \"args\": [\"mcp_server.js\", \"--verbose\"]\n    }\n  },\n  \"telemetry\": {\n    \"enabled\": true,\n    \"target\": \"local\",\n    \"otlpEndpoint\": \"http://localhost:4317\",\n    \"logPrompts\": true\n  },\n  \"usageStatisticsEnabled\": true,\n  \"hideTips\": false\n}\n</code></pre>"},{"location":"cli/configuration/#shell-history","title":"Shell History","text":"<p>The CLI keeps a history of shell commands you run. To avoid conflicts between different projects, this history is stored in a project-specific directory within your user's home folder.</p> <ul> <li>Location: <code>~/.gemini/tmp/&lt;project_hash&gt;/shell_history</code></li> <li><code>&lt;project_hash&gt;</code> is a unique identifier generated from your project's root path.</li> <li>The history is stored in a file named <code>shell_history</code>.</li> </ul>"},{"location":"cli/configuration/#environment-variables-env-files","title":"Environment Variables &amp; <code>.env</code> Files","text":"<p>Environment variables are a common way to configure applications, especially for sensitive information like API keys or for settings that might change between environments.</p> <p>The CLI automatically loads environment variables from an <code>.env</code> file. The loading order is:</p> <ol> <li><code>.env</code> file in the current working directory.</li> <li>If not found, it searches upwards in parent directories until it finds an <code>.env</code> file or reaches the project root (identified by a <code>.git</code> folder) or the home directory.</li> <li> <p>If still not found, it looks for <code>~/.env</code> (in the user's home directory).</p> </li> <li> <p><code>GEMINI_API_KEY</code> (Required):</p> </li> <li>Your API key for the Gemini API.</li> <li>Crucial for operation. The CLI will not function without it.</li> <li>Set this in your shell profile (e.g., <code>~/.bashrc</code>, <code>~/.zshrc</code>) or an <code>.env</code> file.</li> <li><code>GEMINI_MODEL</code>:</li> <li>Specifies the default Gemini model to use.</li> <li>Overrides the hardcoded default</li> <li>Example: <code>export GEMINI_MODEL=\"gemini-2.5-flash\"</code></li> <li><code>GOOGLE_API_KEY</code>:</li> <li>Your Google Cloud API key.</li> <li>Required for using Vertex AI in express mode.</li> <li>Ensure you have the necessary permissions.</li> <li>Example: <code>export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\"</code>.</li> <li><code>GOOGLE_CLOUD_PROJECT</code>:</li> <li>Your Google Cloud Project ID.</li> <li>Required for using Code Assist or Vertex AI.</li> <li>If using Vertex AI, ensure you have the necessary permissions in this project.</li> <li>Cloud Shell Note: When running in a Cloud Shell environment, this variable defaults to a special project allocated for Cloud Shell users. If you have <code>GOOGLE_CLOUD_PROJECT</code> set in your global environment in Cloud Shell, it will be overridden by this default. To use a different project in Cloud Shell, you must define <code>GOOGLE_CLOUD_PROJECT</code> in a <code>.env</code> file.</li> <li>Example: <code>export GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"</code>.</li> <li><code>GOOGLE_APPLICATION_CREDENTIALS</code> (string):</li> <li>Description: The path to your Google Application Credentials JSON file.</li> <li>Example: <code>export GOOGLE_APPLICATION_CREDENTIALS=\"/path/to/your/credentials.json\"</code></li> <li><code>OTLP_GOOGLE_CLOUD_PROJECT</code>:</li> <li>Your Google Cloud Project ID for Telemetry in Google Cloud</li> <li>Example: <code>export OTLP_GOOGLE_CLOUD_PROJECT=\"YOUR_PROJECT_ID\"</code>.</li> <li><code>GOOGLE_CLOUD_LOCATION</code>:</li> <li>Your Google Cloud Project Location (e.g., us-central1).</li> <li>Required for using Vertex AI in non express mode.</li> <li>Example: <code>export GOOGLE_CLOUD_LOCATION=\"YOUR_PROJECT_LOCATION\"</code>.</li> <li><code>GEMINI_SANDBOX</code>:</li> <li>Alternative to the <code>sandbox</code> setting in <code>settings.json</code>.</li> <li>Accepts <code>true</code>, <code>false</code>, <code>docker</code>, <code>podman</code>, or a custom command string.</li> <li><code>SEATBELT_PROFILE</code> (macOS specific):</li> <li>Switches the Seatbelt (<code>sandbox-exec</code>) profile on macOS.</li> <li><code>permissive-open</code>: (Default) Restricts writes to the project folder (and a few other folders, see <code>packages/cli/src/utils/sandbox-macos-permissive-open.sb</code>) but allows other operations.</li> <li><code>strict</code>: Uses a strict profile that declines operations by default.</li> <li><code>&lt;profile_name&gt;</code>: Uses a custom profile. To define a custom profile, create a file named <code>sandbox-macos-&lt;profile_name&gt;.sb</code> in your project's <code>.gemini/</code> directory (e.g., <code>my-project/.gemini/sandbox-macos-custom.sb</code>).</li> <li><code>DEBUG</code> or <code>DEBUG_MODE</code> (often used by underlying libraries or the CLI itself):</li> <li>Set to <code>true</code> or <code>1</code> to enable verbose debug logging, which can be helpful for troubleshooting.</li> <li><code>NO_COLOR</code>:</li> <li>Set to any value to disable all color output in the CLI.</li> <li><code>CLI_TITLE</code>:</li> <li>Set to a string to customize the title of the CLI.</li> <li><code>CODE_ASSIST_ENDPOINT</code>:</li> <li>Specifies the endpoint for the code assist server.</li> <li>This is useful for development and testing.</li> </ol>"},{"location":"cli/configuration/#command-line-arguments","title":"Command-Line Arguments","text":"<p>Arguments passed directly when running the CLI can override other configurations for that specific session.</p> <ul> <li><code>--model &lt;model_name&gt;</code> (<code>-m &lt;model_name&gt;</code>):</li> <li>Specifies the Gemini model to use for this session.</li> <li>Example: <code>npm start -- --model gemini-1.5-pro-latest</code></li> <li><code>--prompt &lt;your_prompt&gt;</code> (<code>-p &lt;your_prompt&gt;</code>):</li> <li>Used to pass a prompt directly to the command. This invokes Gemini CLI in a non-interactive mode.</li> <li><code>--sandbox</code> (<code>-s</code>):</li> <li>Enables sandbox mode for this session.</li> <li><code>--sandbox-image</code>:</li> <li>Sets the sandbox image URI.</li> <li><code>--debug</code> (<code>-d</code>):</li> <li>Enables debug mode for this session, providing more verbose output.</li> <li><code>--all-files</code> (<code>-a</code>):</li> <li>If set, recursively includes all files within the current directory as context for the prompt.</li> <li><code>--help</code> (or <code>-h</code>):</li> <li>Displays help information about command-line arguments.</li> <li><code>--show-memory-usage</code>:</li> <li>Displays the current memory usage.</li> <li><code>--yolo</code>:</li> <li>Enables YOLO mode, which automatically approves all tool calls.</li> <li><code>--telemetry</code>:</li> <li>Enables telemetry.</li> <li><code>--telemetry-target</code>:</li> <li>Sets the telemetry target. See telemetry for more information.</li> <li><code>--telemetry-otlp-endpoint</code>:</li> <li>Sets the OTLP endpoint for telemetry. See telemetry for more information.</li> <li><code>--telemetry-log-prompts</code>:</li> <li>Enables logging of prompts for telemetry. See telemetry for more information.</li> <li><code>--checkpointing</code>:</li> <li>Enables checkpointing.</li> <li><code>--extensions &lt;extension_name ...&gt;</code> (<code>-e &lt;extension_name ...&gt;</code>):</li> <li>Specifies a list of extensions to use for the session. If not provided, all available extensions are used.</li> <li>Use the special term <code>gemini -e none</code> to disable all extensions.</li> <li>Example: <code>gemini -e my-extension -e my-other-extension</code></li> <li><code>--list-extensions</code> (<code>-l</code>):</li> <li>Lists all available extensions and exits.</li> <li><code>--version</code>:</li> <li>Displays the version of the CLI.</li> </ul>"},{"location":"cli/configuration/#context-files-hierarchical-instructional-context","title":"Context Files (Hierarchical Instructional Context)","text":"<p>While not strictly configuration for the CLI's behavior, context files (defaulting to <code>GEMINI.md</code> but configurable via the <code>contextFileName</code> setting) are crucial for configuring the instructional context (also referred to as \"memory\") provided to the Gemini model. This powerful feature allows you to give project-specific instructions, coding style guides, or any relevant background information to the AI, making its responses more tailored and accurate to your needs. The CLI includes UI elements, such as an indicator in the footer showing the number of loaded context files, to keep you informed about the active context.</p> <ul> <li>Purpose: These Markdown files contain instructions, guidelines, or context that you want the Gemini model to be aware of during your interactions. The system is designed to manage this instructional context hierarchically.</li> </ul>"},{"location":"cli/configuration/#example-context-file-content-eg-geminimd","title":"Example Context File Content (e.g., <code>GEMINI.md</code>)","text":"<p>Here's a conceptual example of what a context file at the root of a TypeScript project might contain:</p> <pre><code># Project: My Awesome TypeScript Library\n\n## General Instructions:\n\n- When generating new TypeScript code, please follow the existing coding style.\n- Ensure all new functions and classes have JSDoc comments.\n- Prefer functional programming paradigms where appropriate.\n- All code should be compatible with TypeScript 5.0 and Node.js 20+.\n\n## Coding Style:\n\n- Use 2 spaces for indentation.\n- Interface names should be prefixed with `I` (e.g., `IUserService`).\n- Private class members should be prefixed with an underscore (`_`).\n- Always use strict equality (`===` and `!==`).\n\n## Specific Component: `src/api/client.ts`\n\n- This file handles all outbound API requests.\n- When adding new API call functions, ensure they include robust error handling and logging.\n- Use the existing `fetchWithRetry` utility for all GET requests.\n\n## Regarding Dependencies:\n\n- Avoid introducing new external dependencies unless absolutely necessary.\n- If a new dependency is required, please state the reason.\n</code></pre> <p>This example demonstrates how you can provide general project context, specific coding conventions, and even notes about particular files or components. The more relevant and precise your context files are, the better the AI can assist you. Project-specific context files are highly encouraged to establish conventions and context.</p> <ul> <li>Hierarchical Loading and Precedence: The CLI implements a sophisticated hierarchical memory system by loading context files (e.g., <code>GEMINI.md</code>) from several locations. Content from files lower in this list (more specific) typically overrides or supplements content from files higher up (more general). The exact concatenation order and final context can be inspected using the <code>/memory show</code> command. The typical loading order is:</li> <li>Global Context File:<ul> <li>Location: <code>~/.gemini/&lt;contextFileName&gt;</code> (e.g., <code>~/.gemini/GEMINI.md</code> in your user home directory).</li> <li>Scope: Provides default instructions for all your projects.</li> </ul> </li> <li>Project Root &amp; Ancestors Context Files:<ul> <li>Location: The CLI searches for the configured context file in the current working directory and then in each parent directory up to either the project root (identified by a <code>.git</code> folder) or your home directory.</li> <li>Scope: Provides context relevant to the entire project or a significant portion of it.</li> </ul> </li> <li>Sub-directory Context Files (Contextual/Local):<ul> <li>Location: The CLI also scans for the configured context file in subdirectories below the current working directory (respecting common ignore patterns like <code>node_modules</code>, <code>.git</code>, etc.).</li> <li>Scope: Allows for highly specific instructions relevant to a particular component, module, or subsection of your project.</li> </ul> </li> <li>Concatenation &amp; UI Indication: The contents of all found context files are concatenated (with separators indicating their origin and path) and provided as part of the system prompt to the Gemini model. The CLI footer displays the count of loaded context files, giving you a quick visual cue about the active instructional context.</li> <li>Commands for Memory Management:</li> <li>Use <code>/memory refresh</code> to force a re-scan and reload of all context files from all configured locations. This updates the AI's instructional context.</li> <li>Use <code>/memory show</code> to display the combined instructional context currently loaded, allowing you to verify the hierarchy and content being used by the AI.</li> <li>See the Commands documentation for full details on the <code>/memory</code> command and its sub-commands (<code>show</code> and <code>refresh</code>).</li> </ul> <p>By understanding and utilizing these configuration layers and the hierarchical nature of context files, you can effectively manage the AI's memory and tailor the Gemini CLI's responses to your specific needs and projects.</p>"},{"location":"cli/configuration/#sandboxing","title":"Sandboxing","text":"<p>The Gemini CLI can execute potentially unsafe operations (like shell commands and file modifications) within a sandboxed environment to protect your system.</p> <p>Sandboxing is disabled by default, but you can enable it in a few ways:</p> <ul> <li>Using <code>--sandbox</code> or <code>-s</code> flag.</li> <li>Setting <code>GEMINI_SANDBOX</code> environment variable.</li> <li>Sandbox is enabled in <code>--yolo</code> mode by default.</li> </ul> <p>By default, it uses a pre-built <code>gemini-cli-sandbox</code> Docker image.</p> <p>For project-specific sandboxing needs, you can create a custom Dockerfile at <code>.gemini/sandbox.Dockerfile</code> in your project's root directory. This Dockerfile can be based on the base sandbox image:</p> <pre><code>FROM gemini-cli-sandbox\n\n# Add your custom dependencies or configurations here\n# For example:\n# RUN apt-get update &amp;&amp; apt-get install -y some-package\n# COPY ./my-config /app/my-config\n</code></pre> <p>When <code>.gemini/sandbox.Dockerfile</code> exists, you can use <code>BUILD_SANDBOX</code> environment variable when running Gemini CLI to automatically build the custom sandbox image:</p> <pre><code>BUILD_SANDBOX=1 gemini -s\n</code></pre>"},{"location":"cli/configuration/#usage-statistics","title":"Usage Statistics","text":"<p>To help us improve the Gemini CLI, we collect anonymized usage statistics. This data helps us understand how the CLI is used, identify common issues, and prioritize new features.</p> <p>What we collect:</p> <ul> <li>Tool Calls: We log the names of the tools that are called, whether they succeed or fail, and how long they take to execute. We do not collect the arguments passed to the tools or any data returned by them.</li> <li>API Requests: We log the Gemini model used for each request, the duration of the request, and whether it was successful. We do not collect the content of the prompts or responses.</li> <li>Session Information: We collect information about the configuration of the CLI, such as the enabled tools and the approval mode.</li> </ul> <p>What we DON'T collect:</p> <ul> <li>Personally Identifiable Information (PII): We do not collect any personal information, such as your name, email address, or API keys.</li> <li>Prompt and Response Content: We do not log the content of your prompts or the responses from the Gemini model.</li> <li>File Content: We do not log the content of any files that are read or written by the CLI.</li> </ul> <p>How to opt out:</p> <p>You can opt out of usage statistics collection at any time by setting the <code>usageStatisticsEnabled</code> property to <code>false</code> in your <code>settings.json</code> file:</p> <pre><code>{\n  \"usageStatisticsEnabled\": false\n}\n</code></pre>"},{"location":"cli/themes/","title":"Themes","text":"<p>Gemini CLI supports a variety of themes to customize its color scheme and appearance. You can change the theme to suit your preferences via the <code>/theme</code> command or <code>\"theme\":</code> configuration setting.</p>"},{"location":"cli/themes/#available-themes","title":"Available Themes","text":"<p>Gemini CLI comes with a selection of pre-defined themes, which you can list using the <code>/theme</code> command within Gemini CLI:</p> <ul> <li>Dark Themes:</li> <li><code>ANSI</code></li> <li><code>Atom One</code></li> <li><code>Ayu</code></li> <li><code>Default</code></li> <li><code>Dracula</code></li> <li><code>GitHub</code></li> <li>Light Themes:</li> <li><code>ANSI Light</code></li> <li><code>Ayu Light</code></li> <li><code>Default Light</code></li> <li><code>GitHub Light</code></li> <li><code>Google Code</code></li> <li><code>Xcode</code></li> </ul>"},{"location":"cli/themes/#changing-themes","title":"Changing Themes","text":"<ol> <li>Enter <code>/theme</code> into Gemini CLI.</li> <li>A dialog or selection prompt appears, listing the available themes.</li> <li>Using the arrow keys, select a theme. Some interfaces might offer a live preview or highlight as you select.</li> <li>Confirm your selection to apply the theme.</li> </ol>"},{"location":"cli/themes/#theme-persistence","title":"Theme Persistence","text":"<p>Selected themes are saved in Gemini CLI's configuration so your preference is remembered across sessions.</p>"},{"location":"cli/themes/#dark-themes","title":"Dark Themes","text":""},{"location":"cli/themes/#ansi","title":"ANSI","text":""},{"location":"cli/themes/#atom-onedark","title":"Atom OneDark","text":""},{"location":"cli/themes/#ayu","title":"Ayu","text":""},{"location":"cli/themes/#default","title":"Default","text":""},{"location":"cli/themes/#dracula","title":"Dracula","text":""},{"location":"cli/themes/#github","title":"GitHub","text":""},{"location":"cli/themes/#light-themes","title":"Light Themes","text":""},{"location":"cli/themes/#ansi-light","title":"ANSI Light","text":""},{"location":"cli/themes/#ayu-light","title":"Ayu Light","text":""},{"location":"cli/themes/#default-light","title":"Default Light","text":""},{"location":"cli/themes/#github-light","title":"GitHub Light","text":""},{"location":"cli/themes/#google-code","title":"Google Code","text":""},{"location":"cli/themes/#xcode","title":"Xcode","text":""},{"location":"cli/token-caching/","title":"Token Caching and Cost Optimization","text":"<p>Gemini CLI automatically optimizes API costs through token caching when using API key authentication (Gemini API key or Vertex AI). This feature reuses previous system instructions and context to reduce the number of tokens processed in subsequent requests.</p> <p>Token caching is available for:</p> <ul> <li>API key users (Gemini API key)</li> <li>Vertex AI users (with project and location setup)</li> </ul> <p>Token caching is not available for:</p> <ul> <li>OAuth users (Google Personal/Enterprise accounts) - the Code Assist API does not support cached content creation at this time</li> </ul> <p>You can view your token usage and cached token savings using the <code>/stats</code> command. When cached tokens are available, they will be displayed in the stats output.</p>"},{"location":"cli/tutorials/","title":"Tutorials","text":"<p>This page contains tutorials for interacting with Gemini CLI.</p>"},{"location":"cli/tutorials/#setting-up-a-model-context-protocol-mcp-server","title":"Setting up a Model Context Protocol (MCP) server","text":"<p>[!CAUTION] Before using a third-party MCP server, ensure you trust its source and understand the tools it provides. Your use of third-party servers is at your own risk.</p> <p>This tutorial demonstrates how to set up a MCP server, using the GitHub MCP server as an example. The GitHub MCP server provides tools for interacting with GitHub repositories, such as creating issues and commenting on pull requests.</p>"},{"location":"cli/tutorials/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed and configured:</p> <ul> <li>Docker: Install and run Docker.</li> <li>GitHub Personal Access Token (PAT): Create a new classic or fine-grained PAT with the necessary scopes.</li> </ul>"},{"location":"cli/tutorials/#guide","title":"Guide","text":""},{"location":"cli/tutorials/#configure-the-mcp-server-in-settingsjson","title":"Configure the MCP server in <code>settings.json</code>","text":"<p>In your project's root directory, create or open the <code>.gemini/settings.json</code> file. Within the file, add the <code>mcpServers</code> configuration block, which provides instructions for how to launch the GitHub MCP server.</p> <pre><code>{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"${GITHUB_PERSONAL_ACCESS_TOKEN}\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"cli/tutorials/#set-your-github-token","title":"Set your GitHub token","text":"<p>[!CAUTION] Using a broadly scoped personal access token that has access to personal and private repositories can lead to information from the private repository being leaked into the public repository. We recommend using a fine-grained access token that doesn't share access to both public and private repositories.</p> <p>Use an environment variable to store your GitHub PAT:</p> <pre><code>GITHUB_PERSONAL_ACCESS_TOKEN=\"pat_YourActualGitHubTokenHere\"\n</code></pre> <p>Gemini CLI uses this value in the <code>mcpServers</code> configuration that you defined in the <code>settings.json</code> file.</p>"},{"location":"cli/tutorials/#launch-gemini-cli-and-verify-the-connection","title":"Launch Gemini CLI and verify the connection","text":"<p>When you launch Gemini CLI, it automatically reads your configuration and launches the GitHub MCP server in the background. You can then use natural language prompts to ask Gemini CLI to perform GitHub actions. For example:</p> <pre><code>\"get all open issues assigned to me in the 'foo/bar' repo and prioritize them\"\n</code></pre>"},{"location":"core/","title":"Gemini CLI Core","text":"<p>Gemini CLI's core package (<code>packages/core</code>) is the backend portion of Gemini CLI, handling communication with the Gemini API, managing tools, and processing requests sent from <code>packages/cli</code>. For a general overview of Gemini CLI, see the main documentation page.</p>"},{"location":"core/#navigating-this-section","title":"Navigating this section","text":"<ul> <li>Core tools API: Information on how tools are defined, registered, and used by the core.</li> <li>Memory Import Processor: Documentation for the modular GEMINI.md import feature using @file.md syntax.</li> </ul>"},{"location":"core/#role-of-the-core","title":"Role of the core","text":"<p>While the <code>packages/cli</code> portion of Gemini CLI provides the user interface, <code>packages/core</code> is responsible for:</p> <ul> <li>Gemini API interaction: Securely communicating with the Google Gemini API, sending user prompts, and receiving model responses.</li> <li>Prompt engineering: Constructing effective prompts for the Gemini model, potentially incorporating conversation history, tool definitions, and instructional context from <code>GEMINI.md</code> files.</li> <li>Tool management &amp; orchestration:</li> <li>Registering available tools (e.g., file system tools, shell command execution).</li> <li>Interpreting tool use requests from the Gemini model.</li> <li>Executing the requested tools with the provided arguments.</li> <li>Returning tool execution results to the Gemini model for further processing.</li> <li>Session and state management: Keeping track of the conversation state, including history and any relevant context required for coherent interactions.</li> <li>Configuration: Managing core-specific configurations, such as API key access, model selection, and tool settings.</li> </ul>"},{"location":"core/#security-considerations","title":"Security considerations","text":"<p>The core plays a vital role in security:</p> <ul> <li>API key management: It handles the <code>GEMINI_API_KEY</code> and ensures it's used securely when communicating with the Gemini API.</li> <li>Tool execution: When tools interact with the local system (e.g., <code>run_shell_command</code>), the core (and its underlying tool implementations) must do so with appropriate caution, often involving sandboxing mechanisms to prevent unintended modifications.</li> </ul>"},{"location":"core/#chat-history-compression","title":"Chat history compression","text":"<p>To ensure that long conversations don't exceed the token limits of the Gemini model, the core includes a chat history compression feature.</p> <p>When a conversation approaches the token limit for the configured model, the core automatically compresses the conversation history before sending it to the model. This compression is designed to be lossless in terms of the information conveyed, but it reduces the overall number of tokens used.</p> <p>You can find the token limits for each model in the Google AI documentation.</p>"},{"location":"core/#model-fallback","title":"Model fallback","text":"<p>Gemini CLI includes a model fallback mechanism to ensure that you can continue to use the CLI even if the default \"pro\" model is rate-limited.</p> <p>If you are using the default \"pro\" model and the CLI detects that you are being rate-limited, it automatically switches to the \"flash\" model for the current session. This allows you to continue working without interruption.</p>"},{"location":"core/#file-discovery-service","title":"File discovery service","text":"<p>The file discovery service is responsible for finding files in the project that are relevant to the current context. It is used by the <code>@</code> command and other tools that need to access files.</p>"},{"location":"core/#memory-discovery-service","title":"Memory discovery service","text":"<p>The memory discovery service is responsible for finding and loading the <code>GEMINI.md</code> files that provide context to the model. It searches for these files in a hierarchical manner, starting from the current working directory and moving up to the project root and the user's home directory. It also searches in subdirectories.</p> <p>This allows you to have global, project-level, and component-level context files, which are all combined to provide the model with the most relevant information.</p> <p>You can use the <code>/memory</code> command to <code>show</code>, <code>add</code>, and <code>refresh</code> the content of loaded <code>GEMINI.md</code> files.</p>"},{"location":"core/memport/","title":"Memory Import Processor","text":"<p>The Memory Import Processor is a feature that allows you to modularize your GEMINI.md files by importing content from other markdown files using the <code>@file.md</code> syntax.</p>"},{"location":"core/memport/#overview","title":"Overview","text":"<p>This feature enables you to break down large GEMINI.md files into smaller, more manageable components that can be reused across different contexts. The import processor supports both relative and absolute paths, with built-in safety features to prevent circular imports and ensure file access security.</p>"},{"location":"core/memport/#important-limitations","title":"Important Limitations","text":"<p>This feature only supports <code>.md</code> (markdown) files. Attempting to import files with other extensions (like <code>.txt</code>, <code>.json</code>, etc.) will result in a warning and the import will fail.</p>"},{"location":"core/memport/#syntax","title":"Syntax","text":"<p>Use the <code>@</code> symbol followed by the path to the markdown file you want to import:</p> <pre><code># Main GEMINI.md file\n\nThis is the main content.\n\n@./components/instructions.md\n\nMore content here.\n\n@./shared/configuration.md\n</code></pre>"},{"location":"core/memport/#supported-path-formats","title":"Supported Path Formats","text":""},{"location":"core/memport/#relative-paths","title":"Relative Paths","text":"<ul> <li><code>@./file.md</code> - Import from the same directory</li> <li><code>@../file.md</code> - Import from parent directory</li> <li><code>@./components/file.md</code> - Import from subdirectory</li> </ul>"},{"location":"core/memport/#absolute-paths","title":"Absolute Paths","text":"<ul> <li><code>@/absolute/path/to/file.md</code> - Import using absolute path</li> </ul>"},{"location":"core/memport/#examples","title":"Examples","text":""},{"location":"core/memport/#basic-import","title":"Basic Import","text":"<pre><code># My GEMINI.md\n\nWelcome to my project!\n\n@./getting-started.md\n\n## Features\n\n@./features/overview.md\n</code></pre>"},{"location":"core/memport/#nested-imports","title":"Nested Imports","text":"<p>The imported files can themselves contain imports, creating a nested structure:</p> <pre><code># main.md\n\n@./header.md\n@./content.md\n@./footer.md\n</code></pre> <pre><code># header.md\n\n# Project Header\n\n@./shared/title.md\n</code></pre>"},{"location":"core/memport/#safety-features","title":"Safety Features","text":""},{"location":"core/memport/#circular-import-detection","title":"Circular Import Detection","text":"<p>The processor automatically detects and prevents circular imports:</p> <pre><code># file-a.md\n\n@./file-b.md\n\n# file-b.md\n\n@./file-a.md &lt;!-- This will be detected and prevented --&gt;\n</code></pre>"},{"location":"core/memport/#file-access-security","title":"File Access Security","text":"<p>The <code>validateImportPath</code> function ensures that imports are only allowed from specified directories, preventing access to sensitive files outside the allowed scope.</p>"},{"location":"core/memport/#maximum-import-depth","title":"Maximum Import Depth","text":"<p>To prevent infinite recursion, there's a configurable maximum import depth (default: 10 levels).</p>"},{"location":"core/memport/#error-handling","title":"Error Handling","text":""},{"location":"core/memport/#non-md-file-attempts","title":"Non-MD File Attempts","text":"<p>If you try to import a non-markdown file, you'll see a warning:</p> <pre><code>@./instructions.txt &lt;!-- This will show a warning and fail --&gt;\n</code></pre> <p>Console output:</p> <pre><code>[WARN] [ImportProcessor] Import processor only supports .md files. Attempting to import non-md file: ./instructions.txt. This will fail.\n</code></pre>"},{"location":"core/memport/#missing-files","title":"Missing Files","text":"<p>If a referenced file doesn't exist, the import will fail gracefully with an error comment in the output.</p>"},{"location":"core/memport/#file-access-errors","title":"File Access Errors","text":"<p>Permission issues or other file system errors are handled gracefully with appropriate error messages.</p>"},{"location":"core/memport/#api-reference","title":"API Reference","text":""},{"location":"core/memport/#processimportscontent-basepath-debugmode-importstate","title":"<code>processImports(content, basePath, debugMode?, importState?)</code>","text":"<p>Processes import statements in GEMINI.md content.</p> <p>Parameters:</p> <ul> <li><code>content</code> (string): The content to process for imports</li> <li><code>basePath</code> (string): The directory path where the current file is located</li> <li><code>debugMode</code> (boolean, optional): Whether to enable debug logging (default: false)</li> <li><code>importState</code> (ImportState, optional): State tracking for circular import prevention</li> </ul> <p>Returns: Promise - Processed content with imports resolved"},{"location":"core/memport/#validateimportpathimportpath-basepath-alloweddirectories","title":"<code>validateImportPath(importPath, basePath, allowedDirectories)</code>","text":"<p>Validates import paths to ensure they are safe and within allowed directories.</p> <p>Parameters:</p> <ul> <li><code>importPath</code> (string): The import path to validate</li> <li><code>basePath</code> (string): The base directory for resolving relative paths</li> <li><code>allowedDirectories</code> (string[]): Array of allowed directory paths</li> </ul> <p>Returns: boolean - Whether the import path is valid</p>"},{"location":"core/memport/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive file names for imported components</li> <li>Keep imports shallow - avoid deeply nested import chains</li> <li>Document your structure - maintain a clear hierarchy of imported files</li> <li>Test your imports - ensure all referenced files exist and are accessible</li> <li>Use relative paths when possible for better portability</li> </ol>"},{"location":"core/memport/#troubleshooting","title":"Troubleshooting","text":""},{"location":"core/memport/#common-issues","title":"Common Issues","text":"<ol> <li>Import not working: Check that the file exists and has a <code>.md</code> extension</li> <li>Circular import warnings: Review your import structure for circular references</li> <li>Permission errors: Ensure the files are readable and within allowed directories</li> <li>Path resolution issues: Use absolute paths if relative paths aren't resolving correctly</li> </ol>"},{"location":"core/memport/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode to see detailed logging of the import process:</p> <pre><code>const result = await processImports(content, basePath, true);\n</code></pre>"},{"location":"core/tools-api/","title":"Gemini CLI Core: Tools API","text":"<p>The Gemini CLI core (<code>packages/core</code>) features a robust system for defining, registering, and executing tools. These tools extend the capabilities of the Gemini model, allowing it to interact with the local environment, fetch web content, and perform various actions beyond simple text generation.</p>"},{"location":"core/tools-api/#core-concepts","title":"Core Concepts","text":"<ul> <li>Tool (<code>tools.ts</code>): An interface and base class (<code>BaseTool</code>) that defines the contract for all tools. Each tool must have:</li> <li><code>name</code>: A unique internal name (used in API calls to Gemini).</li> <li><code>displayName</code>: A user-friendly name.</li> <li><code>description</code>: A clear explanation of what the tool does, which is provided to the Gemini model.</li> <li><code>parameterSchema</code>: A JSON schema defining the parameters the tool accepts. This is crucial for the Gemini model to understand how to call the tool correctly.</li> <li><code>validateToolParams()</code>: A method to validate incoming parameters.</li> <li><code>getDescription()</code>: A method to provide a human-readable description of what the tool will do with specific parameters before execution.</li> <li><code>shouldConfirmExecute()</code>: A method to determine if user confirmation is required before execution (e.g., for potentially destructive operations).</li> <li> <p><code>execute()</code>: The core method that performs the tool's action and returns a <code>ToolResult</code>.</p> </li> <li> <p><code>ToolResult</code> (<code>tools.ts</code>): An interface defining the structure of a tool's execution outcome:</p> </li> <li><code>llmContent</code>: The factual string content to be included in the history sent back to the LLM for context.</li> <li> <p><code>returnDisplay</code>: A user-friendly string (often Markdown) or a special object (like <code>FileDiff</code>) for display in the CLI.</p> </li> <li> <p>Tool Registry (<code>tool-registry.ts</code>): A class (<code>ToolRegistry</code>) responsible for:</p> </li> <li>Registering Tools: Holding a collection of all available built-in tools (e.g., <code>ReadFileTool</code>, <code>ShellTool</code>).</li> <li>Discovering Tools: It can also discover tools dynamically:<ul> <li>Command-based Discovery: If <code>toolDiscoveryCommand</code> is configured in settings, this command is executed. It's expected to output JSON describing custom tools, which are then registered as <code>DiscoveredTool</code> instances.</li> <li>MCP-based Discovery: If <code>mcpServerCommand</code> is configured, the registry can connect to a Model Context Protocol (MCP) server to list and register tools (<code>DiscoveredMCPTool</code>).</li> </ul> </li> <li>Providing Schemas: Exposing the <code>FunctionDeclaration</code> schemas of all registered tools to the Gemini model, so it knows what tools are available and how to use them.</li> <li>Retrieving Tools: Allowing the core to get a specific tool by name for execution.</li> </ul>"},{"location":"core/tools-api/#built-in-tools","title":"Built-in Tools","text":"<p>The core comes with a suite of pre-defined tools, typically found in <code>packages/core/src/tools/</code>. These include:</p> <ul> <li>File System Tools:</li> <li><code>LSTool</code> (<code>ls.ts</code>): Lists directory contents.</li> <li><code>ReadFileTool</code> (<code>read-file.ts</code>): Reads the content of a single file. It takes an <code>absolute_path</code> parameter, which must be an absolute path.</li> <li><code>WriteFileTool</code> (<code>write-file.ts</code>): Writes content to a file.</li> <li><code>GrepTool</code> (<code>grep.ts</code>): Searches for patterns in files.</li> <li><code>GlobTool</code> (<code>glob.ts</code>): Finds files matching glob patterns.</li> <li><code>EditTool</code> (<code>edit.ts</code>): Performs in-place modifications to files (often requiring confirmation).</li> <li><code>ReadManyFilesTool</code> (<code>read-many-files.ts</code>): Reads and concatenates content from multiple files or glob patterns (used by the <code>@</code> command in CLI).</li> <li>Execution Tools:</li> <li><code>ShellTool</code> (<code>shell.ts</code>): Executes arbitrary shell commands (requires careful sandboxing and user confirmation).</li> <li>Web Tools:</li> <li><code>WebFetchTool</code> (<code>web-fetch.ts</code>): Fetches content from a URL.</li> <li><code>WebSearchTool</code> (<code>web-search.ts</code>): Performs a web search.</li> <li>Memory Tools:</li> <li><code>MemoryTool</code> (<code>memoryTool.ts</code>): Interacts with the AI's memory.</li> </ul> <p>Each of these tools extends <code>BaseTool</code> and implements the required methods for its specific functionality.</p>"},{"location":"core/tools-api/#tool-execution-flow","title":"Tool Execution Flow","text":"<ol> <li>Model Request: The Gemini model, based on the user's prompt and the provided tool schemas, decides to use a tool and returns a <code>FunctionCall</code> part in its response, specifying the tool name and arguments.</li> <li>Core Receives Request: The core parses this <code>FunctionCall</code>.</li> <li>Tool Retrieval: It looks up the requested tool in the <code>ToolRegistry</code>.</li> <li>Parameter Validation: The tool's <code>validateToolParams()</code> method is called.</li> <li>Confirmation (if needed):<ul> <li>The tool's <code>shouldConfirmExecute()</code> method is called.</li> <li>If it returns details for confirmation, the core communicates this back to the CLI, which prompts the user.</li> <li>The user's decision (e.g., proceed, cancel) is sent back to the core.</li> </ul> </li> <li>Execution: If validated and confirmed (or if no confirmation is needed), the core calls the tool's <code>execute()</code> method with the provided arguments and an <code>AbortSignal</code> (for potential cancellation).</li> <li>Result Processing: The <code>ToolResult</code> from <code>execute()</code> is received by the core.</li> <li>Response to Model: The <code>llmContent</code> from the <code>ToolResult</code> is packaged as a <code>FunctionResponse</code> and sent back to the Gemini model so it can continue generating a user-facing response.</li> <li>Display to User: The <code>returnDisplay</code> from the <code>ToolResult</code> is sent to the CLI to show the user what the tool did.</li> </ol>"},{"location":"core/tools-api/#extending-with-custom-tools","title":"Extending with Custom Tools","text":"<p>While direct programmatic registration of new tools by users isn't explicitly detailed as a primary workflow in the provided files for typical end-users, the architecture supports extension through:</p> <ul> <li>Command-based Discovery: Advanced users or project administrators can define a <code>toolDiscoveryCommand</code> in <code>settings.json</code>. This command, when run by the Gemini CLI core, should output a JSON array of <code>FunctionDeclaration</code> objects. The core will then make these available as <code>DiscoveredTool</code> instances. The corresponding <code>toolCallCommand</code> would then be responsible for actually executing these custom tools.</li> <li>MCP Server(s): For more complex scenarios, one or more MCP servers can be set up and configured via the <code>mcpServers</code> setting in <code>settings.json</code>. The Gemini CLI core can then discover and use tools exposed by these servers. As mentioned, if you have multiple MCP servers, the tool names will be prefixed with the server name from your configuration (e.g., <code>serverAlias__actualToolName</code>).</li> </ul> <p>This tool system provides a flexible and powerful way to augment the Gemini model's capabilities, making the Gemini CLI a versatile assistant for a wide range of tasks.</p>"},{"location":"examples/proxy-script/","title":"Example Proxy Script","text":"<p>The following is an example of a proxy script that can be used with the <code>GEMINI_SANDBOX_PROXY_COMMAND</code> environment variable. This script only allows <code>HTTPS</code> connections to <code>example.com:443</code> and declines all other requests.</p> <pre><code>#!/usr/bin/env node\n\n/**\n * @license\n * Copyright 2025 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Example proxy server that listens on :::8877 and only allows HTTPS connections to example.com.\n// Set `GEMINI_SANDBOX_PROXY_COMMAND=scripts/example-proxy.js` to run proxy alongside sandbox\n// Test via `curl https://example.com` inside sandbox (in shell mode or via shell tool)\n\nimport http from 'http';\nimport net from 'net';\nimport { URL } from 'url';\nimport console from 'console';\n\nconst PROXY_PORT = 8877;\nconst ALLOWED_DOMAINS = ['example.com', 'googleapis.com'];\nconst ALLOWED_PORT = '443';\n\nconst server = http.createServer((req, res) =&gt; {\n  // Deny all requests other than CONNECT for HTTPS\n  console.log(\n    `[PROXY] Denying non-CONNECT request for: ${req.method} ${req.url}`,\n  );\n  res.writeHead(405, { 'Content-Type': 'text/plain' });\n  res.end('Method Not Allowed');\n});\n\nserver.on('connect', (req, clientSocket, head) =&gt; {\n  // req.url will be in the format \"hostname:port\" for a CONNECT request.\n  const { port, hostname } = new URL(`http://${req.url}`);\n\n  console.log(`[PROXY] Intercepted CONNECT request for: ${hostname}:${port}`);\n\n  if (\n    ALLOWED_DOMAINS.some(\n      (domain) =&gt; hostname == domain || hostname.endsWith(`.${domain}`),\n    ) &amp;&amp;\n    port === ALLOWED_PORT\n  ) {\n    console.log(`[PROXY] Allowing connection to ${hostname}:${port}`);\n\n    // Establish a TCP connection to the original destination.\n    const serverSocket = net.connect(port, hostname, () =&gt; {\n      clientSocket.write('HTTP/1.1 200 Connection Established\\r\\n\\r\\n');\n      // Create a tunnel by piping data between the client and the destination server.\n      serverSocket.write(head);\n      serverSocket.pipe(clientSocket);\n      clientSocket.pipe(serverSocket);\n    });\n\n    serverSocket.on('error', (err) =&gt; {\n      console.error(`[PROXY] Error connecting to destination: ${err.message}`);\n      clientSocket.end(`HTTP/1.1 502 Bad Gateway\\r\\n\\r\\n`);\n    });\n  } else {\n    console.log(`[PROXY] Denying connection to ${hostname}:${port}`);\n    clientSocket.end('HTTP/1.1 403 Forbidden\\r\\n\\r\\n');\n  }\n\n  clientSocket.on('error', (err) =&gt; {\n    // This can happen if the client hangs up.\n    console.error(`[PROXY] Client socket error: ${err.message}`);\n  });\n});\n\nserver.listen(PROXY_PORT, () =&gt; {\n  const address = server.address();\n  console.log(`[PROXY] Proxy listening on ${address.address}:${address.port}`);\n  console.log(\n    `[PROXY] Allowing HTTPS connections to domains: ${ALLOWED_DOMAINS.join(', ')}`,\n  );\n});\n</code></pre>"},{"location":"tools/","title":"Gemini CLI tools","text":"<p>The Gemini CLI includes built-in tools that the Gemini model uses to interact with your local environment, access information, and perform actions. These tools enhance the CLI's capabilities, enabling it to go beyond text generation and assist with a wide range of tasks.</p>"},{"location":"tools/#overview-of-gemini-cli-tools","title":"Overview of Gemini CLI tools","text":"<p>In the context of the Gemini CLI, tools are specific functions or modules that the Gemini model can request to be executed. For example, if you ask Gemini to \"Summarize the contents of <code>my_document.txt</code>,\" the model will likely identify the need to read that file and will request the execution of the <code>read_file</code> tool.</p> <p>The core component (<code>packages/core</code>) manages these tools, presents their definitions (schemas) to the Gemini model, executes them when requested, and returns the results to the model for further processing into a user-facing response.</p> <p>These tools provide the following capabilities:</p> <ul> <li>Access local information: Tools allow Gemini to access your local file system, read file contents, list directories, etc.</li> <li>Execute commands: With tools like <code>run_shell_command</code>, Gemini can run shell commands (with appropriate safety measures and user confirmation).</li> <li>Interact with the web: Tools can fetch content from URLs.</li> <li>Take actions: Tools can modify files, write new files, or perform other actions on your system (again, typically with safeguards).</li> <li>Ground responses: By using tools to fetch real-time or specific local data, Gemini's responses can be more accurate, relevant, and grounded in your actual context.</li> </ul>"},{"location":"tools/#how-to-use-gemini-cli-tools","title":"How to use Gemini CLI tools","text":"<p>To use Gemini CLI tools, provide a prompt to the Gemini CLI. The process works as follows:</p> <ol> <li>You provide a prompt to the Gemini CLI.</li> <li>The CLI sends the prompt to the core.</li> <li>The core, along with your prompt and conversation history, sends a list of available tools and their descriptions/schemas to the Gemini API.</li> <li>The Gemini model analyzes your request. If it determines that a tool is needed, its response will include a request to execute a specific tool with certain parameters.</li> <li>The core receives this tool request, validates it, and (often after user confirmation for sensitive operations) executes the tool.</li> <li>The output from the tool is sent back to the Gemini model.</li> <li>The Gemini model uses the tool's output to formulate its final answer, which is then sent back through the core to the CLI and displayed to you.</li> </ol> <p>You will typically see messages in the CLI indicating when a tool is being called and whether it succeeded or failed.</p>"},{"location":"tools/#security-and-confirmation","title":"Security and confirmation","text":"<p>Many tools, especially those that can modify your file system or execute commands (<code>write_file</code>, <code>edit</code>, <code>run_shell_command</code>), are designed with safety in mind. The Gemini CLI will typically:</p> <ul> <li>Require confirmation: Prompt you before executing potentially sensitive operations, showing you what action is about to be taken.</li> <li>Utilize sandboxing: All tools are subject to restrictions enforced by sandboxing (see Sandboxing in the Gemini CLI). This means that when operating in a sandbox, any tools (including MCP servers) you wish to use must be available inside the sandbox environment. For example, to run an MCP server through <code>npx</code>, the <code>npx</code> executable must be installed within the sandbox's Docker image or be available in the <code>sandbox-exec</code> environment.</li> </ul> <p>It's important to always review confirmation prompts carefully before allowing a tool to proceed.</p>"},{"location":"tools/#learn-more-about-gemini-clis-tools","title":"Learn more about Gemini CLI's tools","text":"<p>Gemini CLI's built-in tools can be broadly categorized as follows:</p> <ul> <li>File System Tools: For interacting with files and directories (reading, writing, listing, searching, etc.).</li> <li>Shell Tool (<code>run_shell_command</code>): For executing shell commands.</li> <li>Web Fetch Tool (<code>web_fetch</code>): For retrieving content from URLs.</li> <li>Web Search Tool (<code>web_search</code>): For searching the web.</li> <li>Multi-File Read Tool (<code>read_many_files</code>): A specialized tool for reading content from multiple files or directories, often used by the <code>@</code> command.</li> <li>Memory Tool (<code>save_memory</code>): For saving and recalling information across sessions.</li> </ul> <p>Additionally, these tools incorporate:</p> <ul> <li>MCP servers: MCP servers act as a bridge between the Gemini model and your local environment or other services like APIs.</li> <li>Sandboxing: Sandboxing isolates the model and its changes from your environment to reduce potential risk.</li> </ul>"},{"location":"tools/file-system/","title":"Gemini CLI file system tools","text":"<p>The Gemini CLI provides a comprehensive suite of tools for interacting with the local file system. These tools allow the Gemini model to read from, write to, list, search, and modify files and directories, all under your control and typically with confirmation for sensitive operations.</p> <p>Note: All file system tools operate within a <code>rootDirectory</code> (usually the current working directory where you launched the CLI) for security. Paths that you provide to these tools are generally expected to be absolute or are resolved relative to this root directory.</p>"},{"location":"tools/file-system/#1-list_directory-readfolder","title":"1. <code>list_directory</code> (ReadFolder)","text":"<p><code>list_directory</code> lists the names of files and subdirectories directly within a specified directory path. It can optionally ignore entries matching provided glob patterns.</p> <ul> <li>Tool name: <code>list_directory</code></li> <li>Display name: ReadFolder</li> <li>File: <code>ls.ts</code></li> <li>Parameters:</li> <li><code>path</code> (string, required): The absolute path to the directory to list.</li> <li><code>ignore</code> (array of strings, optional): A list of glob patterns to exclude from the listing (e.g., <code>[\"*.log\", \".git\"]</code>).</li> <li><code>respect_git_ignore</code> (boolean, optional): Whether to respect <code>.gitignore</code> patterns when listing files. Defaults to <code>true</code>.</li> <li>Behavior:</li> <li>Returns a list of file and directory names.</li> <li>Indicates whether each entry is a directory.</li> <li>Sorts entries with directories first, then alphabetically.</li> <li>Output (<code>llmContent</code>): A string like: <code>Directory listing for /path/to/your/folder:\\n[DIR] subfolder1\\nfile1.txt\\nfile2.png</code></li> <li>Confirmation: No.</li> </ul>"},{"location":"tools/file-system/#2-read_file-readfile","title":"2. <code>read_file</code> (ReadFile)","text":"<p><code>read_file</code> reads and returns the content of a specified file. This tool handles text, images (PNG, JPG, GIF, WEBP, SVG, BMP), and PDF files. For text files, it can read specific line ranges. Other binary file types are generally skipped.</p> <ul> <li>Tool name: <code>read_file</code></li> <li>Display name: ReadFile</li> <li>File: <code>read-file.ts</code></li> <li>Parameters:</li> <li><code>path</code> (string, required): The absolute path to the file to read.</li> <li><code>offset</code> (number, optional): For text files, the 0-based line number to start reading from. Requires <code>limit</code> to be set.</li> <li><code>limit</code> (number, optional): For text files, the maximum number of lines to read. If omitted, reads a default maximum (e.g., 2000 lines) or the entire file if feasible.</li> <li>Behavior:</li> <li>For text files: Returns the content. If <code>offset</code> and <code>limit</code> are used, returns only that slice of lines. Indicates if content was truncated due to line limits or line length limits.</li> <li>For image and PDF files: Returns the file content as a base64-encoded data structure suitable for model consumption.</li> <li>For other binary files: Attempts to identify and skip them, returning a message indicating it's a generic binary file.</li> <li>Output: (<code>llmContent</code>):</li> <li>For text files: The file content, potentially prefixed with a truncation message (e.g., <code>[File content truncated: showing lines 1-100 of 500 total lines...]\\nActual file content...</code>).</li> <li>For image/PDF files: An object containing <code>inlineData</code> with <code>mimeType</code> and base64 <code>data</code> (e.g., <code>{ inlineData: { mimeType: 'image/png', data: 'base64encodedstring' } }</code>).</li> <li>For other binary files: A message like <code>Cannot display content of binary file: /path/to/data.bin</code>.</li> <li>Confirmation: No.</li> </ul>"},{"location":"tools/file-system/#3-write_file-writefile","title":"3. <code>write_file</code> (WriteFile)","text":"<p><code>write_file</code> writes content to a specified file. If the file exists, it will be overwritten. If the file doesn't exist, it (and any necessary parent directories) will be created.</p> <ul> <li>Tool name: <code>write_file</code></li> <li>Display name: WriteFile</li> <li>File: <code>write-file.ts</code></li> <li>Parameters:</li> <li><code>file_path</code> (string, required): The absolute path to the file to write to.</li> <li><code>content</code> (string, required): The content to write into the file.</li> <li>Behavior:</li> <li>Writes the provided <code>content</code> to the <code>file_path</code>.</li> <li>Creates parent directories if they don't exist.</li> <li>Output (<code>llmContent</code>): A success message, e.g., <code>Successfully overwrote file: /path/to/your/file.txt</code> or <code>Successfully created and wrote to new file: /path/to/new/file.txt</code>.</li> <li>Confirmation: Yes. Shows a diff of changes and asks for user approval before writing.</li> </ul>"},{"location":"tools/file-system/#4-glob-findfiles","title":"4. <code>glob</code> (FindFiles)","text":"<p><code>glob</code> finds files matching specific glob patterns (e.g., <code>src/**/*.ts</code>, <code>*.md</code>), returning absolute paths sorted by modification time (newest first).</p> <ul> <li>Tool name: <code>glob</code></li> <li>Display name: FindFiles</li> <li>File: <code>glob.ts</code></li> <li>Parameters:</li> <li><code>pattern</code> (string, required): The glob pattern to match against (e.g., <code>\"*.py\"</code>, <code>\"src/**/*.js\"</code>).</li> <li><code>path</code> (string, optional): The absolute path to the directory to search within. If omitted, searches the tool's root directory.</li> <li><code>case_sensitive</code> (boolean, optional): Whether the search should be case-sensitive. Defaults to <code>false</code>.</li> <li><code>respect_git_ignore</code> (boolean, optional): Whether to respect .gitignore patterns when finding files. Defaults to <code>true</code>.</li> <li>Behavior:</li> <li>Searches for files matching the glob pattern within the specified directory.</li> <li>Returns a list of absolute paths, sorted with the most recently modified files first.</li> <li>Ignores common nuisance directories like <code>node_modules</code> and <code>.git</code> by default.</li> <li>Output (<code>llmContent</code>): A message like: <code>Found 5 file(s) matching \"*.ts\" within src, sorted by modification time (newest first):\\nsrc/file1.ts\\nsrc/subdir/file2.ts...</code></li> <li>Confirmation: No.</li> </ul>"},{"location":"tools/file-system/#5-search_file_content-searchtext","title":"5. <code>search_file_content</code> (SearchText)","text":"<p><code>search_file_content</code> searches for a regular expression pattern within the content of files in a specified directory. Can filter files by a glob pattern. Returns the lines containing matches, along with their file paths and line numbers.</p> <ul> <li>Tool name: <code>search_file_content</code></li> <li>Display name: SearchText</li> <li>File: <code>grep.ts</code></li> <li>Parameters:</li> <li><code>pattern</code> (string, required): The regular expression (regex) to search for (e.g., <code>\"function\\s+myFunction\"</code>).</li> <li><code>path</code> (string, optional): The absolute path to the directory to search within. Defaults to the current working directory.</li> <li><code>include</code> (string, optional): A glob pattern to filter which files are searched (e.g., <code>\"*.js\"</code>, <code>\"src/**/*.{ts,tsx}\"</code>). If omitted, searches most files (respecting common ignores).</li> <li>Behavior:</li> <li>Uses <code>git grep</code> if available in a Git repository for speed, otherwise falls back to system <code>grep</code> or a JavaScript-based search.</li> <li>Returns a list of matching lines, each prefixed with its file path (relative to the search directory) and line number.</li> <li>Output (<code>llmContent</code>): A formatted string of matches, e.g.:   ```   Found 3 matches for pattern \"myFunction\" in path \".\" (filter: \"*.ts\"):</li> </ul> <p>File: src/utils.ts   L15: export function myFunction() {   L22:   myFunction.call();</p> <p>File: src/index.ts   L5: import { myFunction } from './utils';</p> <p>``` - Confirmation: No.</p>"},{"location":"tools/file-system/#6-replace-edit","title":"6. <code>replace</code> (Edit)","text":"<p><code>replace</code> replaces text within a file. By default, replaces a single occurrence, but can replace multiple occurrences when <code>expected_replacements</code> is specified. This tool is designed for precise, targeted changes and requires significant context around the <code>old_string</code> to ensure it modifies the correct location.</p> <ul> <li>Tool name: <code>replace</code></li> <li>Display name: Edit</li> <li>File: <code>edit.ts</code></li> <li>Parameters:</li> <li><code>file_path</code> (string, required): The absolute path to the file to modify.</li> <li> <p><code>old_string</code> (string, required): The exact literal text to replace.</p> <p>CRITICAL: This string must uniquely identify the single instance to change. It should include at least 3 lines of context before and after the target text, matching whitespace and indentation precisely. If <code>old_string</code> is empty, the tool attempts to create a new file at <code>file_path</code> with <code>new_string</code> as content.</p> </li> <li> <p><code>new_string</code> (string, required): The exact literal text to replace <code>old_string</code> with.</p> </li> <li> <p><code>expected_replacements</code> (number, optional): The number of occurrences to replace. Defaults to <code>1</code>.</p> </li> <li> <p>Behavior:</p> </li> <li>If <code>old_string</code> is empty and <code>file_path</code> does not exist, creates a new file with <code>new_string</code> as content.</li> <li>If <code>old_string</code> is provided, it reads the <code>file_path</code> and attempts to find exactly one occurrence of <code>old_string</code>.</li> <li>If one occurrence is found, it replaces it with <code>new_string</code>.</li> <li>Enhanced Reliability (Multi-Stage Edit Correction): To significantly improve the success rate of edits, especially when the model-provided <code>old_string</code> might not be perfectly precise, the tool incorporates a multi-stage edit correction mechanism.<ul> <li>If the initial <code>old_string</code> isn't found or matches multiple locations, the tool can leverage the Gemini model to iteratively refine <code>old_string</code> (and potentially <code>new_string</code>).</li> <li>This self-correction process attempts to identify the unique segment the model intended to modify, making the <code>replace</code> operation more robust even with slightly imperfect initial context.</li> </ul> </li> <li>Failure conditions: Despite the correction mechanism, the tool will fail if:</li> <li><code>file_path</code> is not absolute or is outside the root directory.</li> <li><code>old_string</code> is not empty, but the <code>file_path</code> does not exist.</li> <li><code>old_string</code> is empty, but the <code>file_path</code> already exists.</li> <li><code>old_string</code> is not found in the file after attempts to correct it.</li> <li><code>old_string</code> is found multiple times, and the self-correction mechanism cannot resolve it to a single, unambiguous match.</li> <li>Output (<code>llmContent</code>):</li> <li>On success: <code>Successfully modified file: /path/to/file.txt (1 replacements).</code> or <code>Created new file: /path/to/new_file.txt with provided content.</code></li> <li>On failure: An error message explaining the reason (e.g., <code>Failed to edit, 0 occurrences found...</code>, <code>Failed to edit, expected 1 occurrences but found 2...</code>).</li> <li>Confirmation: Yes. Shows a diff of the proposed changes and asks for user approval before writing to the file.</li> </ul> <p>These file system tools provide a foundation for the Gemini CLI to understand and interact with your local project context.</p>"},{"location":"tools/mcp-server/","title":"MCP servers with the Gemini CLI","text":"<p>This document provides a guide to configuring and using Model Context Protocol (MCP) servers with the Gemini CLI.</p>"},{"location":"tools/mcp-server/#what-is-an-mcp-server","title":"What is an MCP server?","text":"<p>An MCP server is an application that exposes tools and resources to the Gemini CLI through the Model Context Protocol, allowing it to interact with external systems and data sources. MCP servers act as a bridge between the Gemini model and your local environment or other services like APIs.</p> <p>An MCP server enables the Gemini CLI to:</p> <ul> <li>Discover tools: List available tools, their descriptions, and parameters through standardized schema definitions.</li> <li>Execute tools: Call specific tools with defined arguments and receive structured responses.</li> <li>Access resources: Read data from specific resources (though the Gemini CLI primarily focuses on tool execution).</li> </ul> <p>With an MCP server, you can extend the Gemini CLI's capabilities to perform actions beyond its built-in features, such as interacting with databases, APIs, custom scripts, or specialized workflows.</p>"},{"location":"tools/mcp-server/#core-integration-architecture","title":"Core Integration Architecture","text":"<p>The Gemini CLI integrates with MCP servers through a sophisticated discovery and execution system built into the core package (<code>packages/core/src/tools/</code>):</p>"},{"location":"tools/mcp-server/#discovery-layer-mcp-clientts","title":"Discovery Layer (<code>mcp-client.ts</code>)","text":"<p>The discovery process is orchestrated by <code>discoverMcpTools()</code>, which:</p> <ol> <li>Iterates through configured servers from your <code>settings.json</code> <code>mcpServers</code> configuration</li> <li>Establishes connections using appropriate transport mechanisms (Stdio, SSE, or Streamable HTTP)</li> <li>Fetches tool definitions from each server using the MCP protocol</li> <li>Sanitizes and validates tool schemas for compatibility with the Gemini API</li> <li>Registers tools in the global tool registry with conflict resolution</li> </ol>"},{"location":"tools/mcp-server/#execution-layer-mcp-toolts","title":"Execution Layer (<code>mcp-tool.ts</code>)","text":"<p>Each discovered MCP tool is wrapped in a <code>DiscoveredMCPTool</code> instance that:</p> <ul> <li>Handles confirmation logic based on server trust settings and user preferences</li> <li>Manages tool execution by calling the MCP server with proper parameters</li> <li>Processes responses for both the LLM context and user display</li> <li>Maintains connection state and handles timeouts</li> </ul>"},{"location":"tools/mcp-server/#transport-mechanisms","title":"Transport Mechanisms","text":"<p>The Gemini CLI supports three MCP transport types:</p> <ul> <li>Stdio Transport: Spawns a subprocess and communicates via stdin/stdout</li> <li>SSE Transport: Connects to Server-Sent Events endpoints</li> <li>Streamable HTTP Transport: Uses HTTP streaming for communication</li> </ul>"},{"location":"tools/mcp-server/#how-to-set-up-your-mcp-server","title":"How to set up your MCP server","text":"<p>The Gemini CLI uses the <code>mcpServers</code> configuration in your <code>settings.json</code> file to locate and connect to MCP servers. This configuration supports multiple servers with different transport mechanisms.</p>"},{"location":"tools/mcp-server/#configure-the-mcp-server-in-settingsjson","title":"Configure the MCP server in settings.json","text":"<p>You can configure MCP servers at the global level in the <code>~/.gemini/settings.json</code> file or in your project's root directory, create or open the <code>.gemini/settings.json</code> file. Within the file, add the <code>mcpServers</code> configuration block.</p>"},{"location":"tools/mcp-server/#configuration-structure","title":"Configuration Structure","text":"<p>Add an <code>mcpServers</code> object to your <code>settings.json</code> file:</p> <pre><code>{ ...file contains other config objects\n  \"mcpServers\": {\n    \"serverName\": {\n      \"command\": \"path/to/server\",\n      \"args\": [\"--arg1\", \"value1\"],\n      \"env\": {\n        \"API_KEY\": \"$MY_API_TOKEN\"\n      },\n      \"cwd\": \"./server-directory\",\n      \"timeout\": 30000,\n      \"trust\": false\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#configuration-properties","title":"Configuration Properties","text":"<p>Each server configuration supports the following properties:</p>"},{"location":"tools/mcp-server/#required-one-of-the-following","title":"Required (one of the following)","text":"<ul> <li><code>command</code> (string): Path to the executable for Stdio transport</li> <li><code>url</code> (string): SSE endpoint URL (e.g., <code>\"http://localhost:8080/sse\"</code>)</li> <li><code>httpUrl</code> (string): HTTP streaming endpoint URL</li> </ul>"},{"location":"tools/mcp-server/#optional","title":"Optional","text":"<ul> <li><code>args</code> (string[]): Command-line arguments for Stdio transport</li> <li><code>headers</code> (object): Custom HTTP headers when using <code>httpUrl</code></li> <li><code>env</code> (object): Environment variables for the server process. Values can reference environment variables using <code>$VAR_NAME</code> or <code>${VAR_NAME}</code> syntax</li> <li><code>cwd</code> (string): Working directory for Stdio transport</li> <li><code>timeout</code> (number): Request timeout in milliseconds (default: 600,000ms = 10 minutes)</li> <li><code>trust</code> (boolean): When <code>true</code>, bypasses all tool call confirmations for this server (default: <code>false</code>)</li> </ul>"},{"location":"tools/mcp-server/#example-configurations","title":"Example Configurations","text":""},{"location":"tools/mcp-server/#python-mcp-server-stdio","title":"Python MCP Server (Stdio)","text":"<pre><code>{\n  \"mcpServers\": {\n    \"pythonTools\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"my_mcp_server\", \"--port\", \"8080\"],\n      \"cwd\": \"./mcp-servers/python\",\n      \"env\": {\n        \"DATABASE_URL\": \"$DB_CONNECTION_STRING\",\n        \"API_KEY\": \"${EXTERNAL_API_KEY}\"\n      },\n      \"timeout\": 15000\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#nodejs-mcp-server-stdio","title":"Node.js MCP Server (Stdio)","text":"<pre><code>{\n  \"mcpServers\": {\n    \"nodeServer\": {\n      \"command\": \"node\",\n      \"args\": [\"dist/server.js\", \"--verbose\"],\n      \"cwd\": \"./mcp-servers/node\",\n      \"trust\": true\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#docker-based-mcp-server","title":"Docker-based MCP Server","text":"<pre><code>{\n  \"mcpServers\": {\n    \"dockerizedServer\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"API_KEY\",\n        \"-v\",\n        \"${PWD}:/workspace\",\n        \"my-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"API_KEY\": \"$EXTERNAL_SERVICE_TOKEN\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#http-based-mcp-server","title":"HTTP-based MCP Server","text":"<pre><code>{\n  \"mcpServers\": {\n    \"httpServer\": {\n      \"httpUrl\": \"http://localhost:3000/mcp\",\n      \"timeout\": 5000\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#http-based-mcp-server-with-custom-headers","title":"HTTP-based MCP Server with Custom Headers","text":"<pre><code>{\n  \"mcpServers\": {\n    \"httpServerWithAuth\": {\n      \"httpUrl\": \"http://localhost:3000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer your-api-token\",\n        \"X-Custom-Header\": \"custom-value\",\n        \"Content-Type\": \"application/json\"\n      },\n      \"timeout\": 5000\n    }\n  }\n}\n</code></pre>"},{"location":"tools/mcp-server/#discovery-process-deep-dive","title":"Discovery Process Deep Dive","text":"<p>When the Gemini CLI starts, it performs MCP server discovery through the following detailed process:</p>"},{"location":"tools/mcp-server/#1-server-iteration-and-connection","title":"1. Server Iteration and Connection","text":"<p>For each configured server in <code>mcpServers</code>:</p> <ol> <li>Status tracking begins: Server status is set to <code>CONNECTING</code></li> <li>Transport selection: Based on configuration properties:</li> <li><code>httpUrl</code> \u2192 <code>StreamableHTTPClientTransport</code></li> <li><code>url</code> \u2192 <code>SSEClientTransport</code></li> <li><code>command</code> \u2192 <code>StdioClientTransport</code></li> <li>Connection establishment: The MCP client attempts to connect with the configured timeout</li> <li>Error handling: Connection failures are logged and the server status is set to <code>DISCONNECTED</code></li> </ol>"},{"location":"tools/mcp-server/#2-tool-discovery","title":"2. Tool Discovery","text":"<p>Upon successful connection:</p> <ol> <li>Tool listing: The client calls the MCP server's tool listing endpoint</li> <li>Schema validation: Each tool's function declaration is validated</li> <li>Name sanitization: Tool names are cleaned to meet Gemini API requirements:</li> <li>Invalid characters (non-alphanumeric, underscore, dot, hyphen) are replaced with underscores</li> <li>Names longer than 63 characters are truncated with middle replacement (<code>___</code>)</li> </ol>"},{"location":"tools/mcp-server/#3-conflict-resolution","title":"3. Conflict Resolution","text":"<p>When multiple servers expose tools with the same name:</p> <ol> <li>First registration wins: The first server to register a tool name gets the unprefixed name</li> <li>Automatic prefixing: Subsequent servers get prefixed names: <code>serverName__toolName</code></li> <li>Registry tracking: The tool registry maintains mappings between server names and their tools</li> </ol>"},{"location":"tools/mcp-server/#4-schema-processing","title":"4. Schema Processing","text":"<p>Tool parameter schemas undergo sanitization for Gemini API compatibility:</p> <ul> <li><code>$schema</code> properties are removed</li> <li><code>additionalProperties</code> are stripped</li> <li><code>anyOf</code> with <code>default</code> have their default values removed (Vertex AI compatibility)</li> <li>Recursive processing applies to nested schemas</li> </ul>"},{"location":"tools/mcp-server/#5-connection-management","title":"5. Connection Management","text":"<p>After discovery:</p> <ul> <li>Persistent connections: Servers that successfully register tools maintain their connections</li> <li>Cleanup: Servers that provide no usable tools have their connections closed</li> <li>Status updates: Final server statuses are set to <code>CONNECTED</code> or <code>DISCONNECTED</code></li> </ul>"},{"location":"tools/mcp-server/#tool-execution-flow","title":"Tool Execution Flow","text":"<p>When the Gemini model decides to use an MCP tool, the following execution flow occurs:</p>"},{"location":"tools/mcp-server/#1-tool-invocation","title":"1. Tool Invocation","text":"<p>The model generates a <code>FunctionCall</code> with:</p> <ul> <li>Tool name: The registered name (potentially prefixed)</li> <li>Arguments: JSON object matching the tool's parameter schema</li> </ul>"},{"location":"tools/mcp-server/#2-confirmation-process","title":"2. Confirmation Process","text":"<p>Each <code>DiscoveredMCPTool</code> implements sophisticated confirmation logic:</p>"},{"location":"tools/mcp-server/#trust-based-bypass","title":"Trust-based Bypass","text":"<pre><code>if (this.trust) {\n  return false; // No confirmation needed\n}\n</code></pre>"},{"location":"tools/mcp-server/#dynamic-allow-listing","title":"Dynamic Allow-listing","text":"<p>The system maintains internal allow-lists for:</p> <ul> <li>Server-level: <code>serverName</code> \u2192 All tools from this server are trusted</li> <li>Tool-level: <code>serverName.toolName</code> \u2192 This specific tool is trusted</li> </ul>"},{"location":"tools/mcp-server/#user-choice-handling","title":"User Choice Handling","text":"<p>When confirmation is required, users can choose:</p> <ul> <li>Proceed once: Execute this time only</li> <li>Always allow this tool: Add to tool-level allow-list</li> <li>Always allow this server: Add to server-level allow-list</li> <li>Cancel: Abort execution</li> </ul>"},{"location":"tools/mcp-server/#3-execution","title":"3. Execution","text":"<p>Upon confirmation (or trust bypass):</p> <ol> <li>Parameter preparation: Arguments are validated against the tool's schema</li> <li>MCP call: The underlying <code>CallableTool</code> invokes the server with:</li> </ol> <p><code>typescript    const functionCalls = [      {        name: this.serverToolName, // Original server tool name        args: params,      },    ];</code></p> <ol> <li>Response processing: Results are formatted for both LLM context and user display</li> </ol>"},{"location":"tools/mcp-server/#4-response-handling","title":"4. Response Handling","text":"<p>The execution result contains:</p> <ul> <li><code>llmContent</code>: Raw response parts for the language model's context</li> <li><code>returnDisplay</code>: Formatted output for user display (often JSON in markdown code blocks)</li> </ul>"},{"location":"tools/mcp-server/#how-to-interact-with-your-mcp-server","title":"How to interact with your MCP server","text":""},{"location":"tools/mcp-server/#using-the-mcp-command","title":"Using the <code>/mcp</code> Command","text":"<p>The <code>/mcp</code> command provides comprehensive information about your MCP server setup:</p> <pre><code>/mcp\n</code></pre> <p>This displays:</p> <ul> <li>Server list: All configured MCP servers</li> <li>Connection status: <code>CONNECTED</code>, <code>CONNECTING</code>, or <code>DISCONNECTED</code></li> <li>Server details: Configuration summary (excluding sensitive data)</li> <li>Available tools: List of tools from each server with descriptions</li> <li>Discovery state: Overall discovery process status</li> </ul>"},{"location":"tools/mcp-server/#example-mcp-output","title":"Example <code>/mcp</code> Output","text":"<pre><code>MCP Servers Status:\n\n\ud83d\udce1 pythonTools (CONNECTED)\n  Command: python -m my_mcp_server --port 8080\n  Working Directory: ./mcp-servers/python\n  Timeout: 15000ms\n  Tools: calculate_sum, file_analyzer, data_processor\n\n\ud83d\udd0c nodeServer (DISCONNECTED)\n  Command: node dist/server.js --verbose\n  Error: Connection refused\n\n\ud83d\udc33 dockerizedServer (CONNECTED)\n  Command: docker run -i --rm -e API_KEY my-mcp-server:latest\n  Tools: docker__deploy, docker__status\n\nDiscovery State: COMPLETED\n</code></pre>"},{"location":"tools/mcp-server/#tool-usage","title":"Tool Usage","text":"<p>Once discovered, MCP tools are available to the Gemini model like built-in tools. The model will automatically:</p> <ol> <li>Select appropriate tools based on your requests</li> <li>Present confirmation dialogs (unless the server is trusted)</li> <li>Execute tools with proper parameters</li> <li>Display results in a user-friendly format</li> </ol>"},{"location":"tools/mcp-server/#status-monitoring-and-troubleshooting","title":"Status Monitoring and Troubleshooting","text":""},{"location":"tools/mcp-server/#connection-states","title":"Connection States","text":"<p>The MCP integration tracks several states:</p>"},{"location":"tools/mcp-server/#server-status-mcpserverstatus","title":"Server Status (<code>MCPServerStatus</code>)","text":"<ul> <li><code>DISCONNECTED</code>: Server is not connected or has errors</li> <li><code>CONNECTING</code>: Connection attempt in progress</li> <li><code>CONNECTED</code>: Server is connected and ready</li> </ul>"},{"location":"tools/mcp-server/#discovery-state-mcpdiscoverystate","title":"Discovery State (<code>MCPDiscoveryState</code>)","text":"<ul> <li><code>NOT_STARTED</code>: Discovery hasn't begun</li> <li><code>IN_PROGRESS</code>: Currently discovering servers</li> <li><code>COMPLETED</code>: Discovery finished (with or without errors)</li> </ul>"},{"location":"tools/mcp-server/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"tools/mcp-server/#server-wont-connect","title":"Server Won't Connect","text":"<p>Symptoms: Server shows <code>DISCONNECTED</code> status</p> <p>Troubleshooting:</p> <ol> <li>Check configuration: Verify <code>command</code>, <code>args</code>, and <code>cwd</code> are correct</li> <li>Test manually: Run the server command directly to ensure it works</li> <li>Check dependencies: Ensure all required packages are installed</li> <li>Review logs: Look for error messages in the CLI output</li> <li>Verify permissions: Ensure the CLI can execute the server command</li> </ol>"},{"location":"tools/mcp-server/#no-tools-discovered","title":"No Tools Discovered","text":"<p>Symptoms: Server connects but no tools are available</p> <p>Troubleshooting:</p> <ol> <li>Verify tool registration: Ensure your server actually registers tools</li> <li>Check MCP protocol: Confirm your server implements the MCP tool listing correctly</li> <li>Review server logs: Check stderr output for server-side errors</li> <li>Test tool listing: Manually test your server's tool discovery endpoint</li> </ol>"},{"location":"tools/mcp-server/#tools-not-executing","title":"Tools Not Executing","text":"<p>Symptoms: Tools are discovered but fail during execution</p> <p>Troubleshooting:</p> <ol> <li>Parameter validation: Ensure your tool accepts the expected parameters</li> <li>Schema compatibility: Verify your input schemas are valid JSON Schema</li> <li>Error handling: Check if your tool is throwing unhandled exceptions</li> <li>Timeout issues: Consider increasing the <code>timeout</code> setting</li> </ol>"},{"location":"tools/mcp-server/#sandbox-compatibility","title":"Sandbox Compatibility","text":"<p>Symptoms: MCP servers fail when sandboxing is enabled</p> <p>Solutions:</p> <ol> <li>Docker-based servers: Use Docker containers that include all dependencies</li> <li>Path accessibility: Ensure server executables are available in the sandbox</li> <li>Network access: Configure sandbox to allow necessary network connections</li> <li>Environment variables: Verify required environment variables are passed through</li> </ol>"},{"location":"tools/mcp-server/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Enable debug mode: Run the CLI with <code>--debug</code> for verbose output</li> <li>Check stderr: MCP server stderr is captured and logged (INFO messages filtered)</li> <li>Test isolation: Test your MCP server independently before integrating</li> <li>Incremental setup: Start with simple tools before adding complex functionality</li> <li>Use <code>/mcp</code> frequently: Monitor server status during development</li> </ol>"},{"location":"tools/mcp-server/#important-notes","title":"Important Notes","text":""},{"location":"tools/mcp-server/#security-considerations","title":"Security Considerations","text":"<ul> <li>Trust settings: The <code>trust</code> option bypasses all confirmation dialogs. Use cautiously and only for servers you completely control</li> <li>Access tokens: Be security-aware when configuring environment variables containing API keys or tokens</li> <li>Sandbox compatibility: When using sandboxing, ensure MCP servers are available within the sandbox environment</li> <li>Private data: Using broadly scoped personal access tokens can lead to information leakage between repositories</li> </ul>"},{"location":"tools/mcp-server/#performance-and-resource-management","title":"Performance and Resource Management","text":"<ul> <li>Connection persistence: The CLI maintains persistent connections to servers that successfully register tools</li> <li>Automatic cleanup: Connections to servers providing no tools are automatically closed</li> <li>Timeout management: Configure appropriate timeouts based on your server's response characteristics</li> <li>Resource monitoring: MCP servers run as separate processes and consume system resources</li> </ul>"},{"location":"tools/mcp-server/#schema-compatibility","title":"Schema Compatibility","text":"<ul> <li>Property stripping: The system automatically removes certain schema properties (<code>$schema</code>, <code>additionalProperties</code>) for Gemini API compatibility</li> <li>Name sanitization: Tool names are automatically sanitized to meet API requirements</li> <li>Conflict resolution: Tool name conflicts between servers are resolved through automatic prefixing</li> </ul> <p>This comprehensive integration makes MCP servers a powerful way to extend the Gemini CLI's capabilities while maintaining security, reliability, and ease of use.</p>"},{"location":"tools/memory/","title":"Memory Tool (<code>save_memory</code>)","text":"<p>This document describes the <code>save_memory</code> tool for the Gemini CLI.</p>"},{"location":"tools/memory/#description","title":"Description","text":"<p>Use <code>save_memory</code> to save and recall information across your Gemini CLI sessions. With <code>save_memory</code>, you can direct the CLI to remember key details across sessions, providing personalized and directed assistance.</p>"},{"location":"tools/memory/#arguments","title":"Arguments","text":"<p><code>save_memory</code> takes one argument:</p> <ul> <li><code>fact</code> (string, required): The specific fact or piece of information to remember. This should be a clear, self-contained statement written in natural language.</li> </ul>"},{"location":"tools/memory/#how-to-use-save_memory-with-the-gemini-cli","title":"How to use <code>save_memory</code> with the Gemini CLI","text":"<p>The tool appends the provided <code>fact</code> to a special <code>GEMINI.md</code> file located in the user's home directory (<code>~/.gemini/GEMINI.md</code>). This file can be configured to have a different name.</p> <p>Once added, the facts are stored under a <code>## Gemini Added Memories</code> section. This file is loaded as context in subsequent sessions, allowing the CLI to recall the saved information.</p> <p>Usage:</p> <pre><code>save_memory(fact=\"Your fact here.\")\n</code></pre>"},{"location":"tools/memory/#save_memory-examples","title":"<code>save_memory</code> examples","text":"<p>Remember a user preference:</p> <pre><code>save_memory(fact=\"My preferred programming language is Python.\")\n</code></pre> <p>Store a project-specific detail:</p> <pre><code>save_memory(fact=\"The project I'm currently working on is called 'gemini-cli'.\")\n</code></pre>"},{"location":"tools/memory/#important-notes","title":"Important notes","text":"<ul> <li>General usage: This tool should be used for concise, important facts. It is not intended for storing large amounts of data or conversational history.</li> <li>Memory file: The memory file is a plain text Markdown file, so you can view and edit it manually if needed.</li> </ul>"},{"location":"tools/multi-file/","title":"Multi File Read Tool (<code>read_many_files</code>)","text":"<p>This document describes the <code>read_many_files</code> tool for the Gemini CLI.</p>"},{"location":"tools/multi-file/#description","title":"Description","text":"<p>Use <code>read_many_files</code> to read content from multiple files specified by paths or glob patterns. The behavior of this tool depends on the provided files:</p> <ul> <li>For text files, this tool concatenates their content into a single string.</li> <li>For image (e.g., PNG, JPEG) and PDF files, it reads and returns them as base64-encoded data, provided they are explicitly requested by name or extension.</li> </ul> <p><code>read_many_files</code> can be used to perform tasks such as getting an overview of a codebase, finding where specific functionality is implemented, reviewing documentation, or gathering context from multiple configuration files.</p>"},{"location":"tools/multi-file/#arguments","title":"Arguments","text":"<p><code>read_many_files</code> takes the following arguments:</p> <ul> <li><code>paths</code> (list[string], required): An array of glob patterns or paths relative to the tool's target directory (e.g., <code>[\"src/**/*.ts\"]</code>, <code>[\"README.md\", \"docs/\", \"assets/logo.png\"]</code>).</li> <li><code>exclude</code> (list[string], optional): Glob patterns for files/directories to exclude (e.g., <code>[\"**/*.log\", \"temp/\"]</code>). These are added to default excludes if <code>useDefaultExcludes</code> is true.</li> <li><code>include</code> (list[string], optional): Additional glob patterns to include. These are merged with <code>paths</code> (e.g., <code>[\"*.test.ts\"]</code> to specifically add test files if they were broadly excluded, or <code>[\"images/*.jpg\"]</code> to include specific image types).</li> <li><code>recursive</code> (boolean, optional): Whether to search recursively. This is primarily controlled by <code>**</code> in glob patterns. Defaults to <code>true</code>.</li> <li><code>useDefaultExcludes</code> (boolean, optional): Whether to apply a list of default exclusion patterns (e.g., <code>node_modules</code>, <code>.git</code>, non image/pdf binary files). Defaults to <code>true</code>.</li> <li><code>respect_git_ignore</code> (boolean, optional): Whether to respect .gitignore patterns when finding files. Defaults to true.</li> </ul>"},{"location":"tools/multi-file/#how-to-use-read_many_files-with-the-gemini-cli","title":"How to use <code>read_many_files</code> with the Gemini CLI","text":"<p><code>read_many_files</code> searches for files matching the provided <code>paths</code> and <code>include</code> patterns, while respecting <code>exclude</code> patterns and default excludes (if enabled).</p> <ul> <li>For text files: it reads the content of each matched file (attempting to skip binary files not explicitly requested as image/PDF) and concatenates it into a single string, with a separator <code>--- {filePath} ---</code> between the content of each file. Uses UTF-8 encoding by default.</li> <li>For image and PDF files: if explicitly requested by name or extension (e.g., <code>paths: [\"logo.png\"]</code> or <code>include: [\"*.pdf\"]</code>), the tool reads the file and returns its content as a base64 encoded string.</li> <li>The tool attempts to detect and skip other binary files (those not matching common image/PDF types or not explicitly requested) by checking for null bytes in their initial content.</li> </ul> <p>Usage:</p> <pre><code>read_many_files(paths=[\"Your files or paths here.\"], include=[\"Additional files to include.\"], exclude=[\"Files to exclude.\"], recursive=False, useDefaultExcludes=false, respect_git_ignore=true)\n</code></pre>"},{"location":"tools/multi-file/#read_many_files-examples","title":"<code>read_many_files</code> examples","text":"<p>Read all TypeScript files in the <code>src</code> directory:</p> <pre><code>read_many_files(paths=[\"src/**/*.ts\"])\n</code></pre> <p>Read the main README, all Markdown files in the <code>docs</code> directory, and a specific logo image, excluding a specific file:</p> <pre><code>read_many_files(paths=[\"README.md\", \"docs/**/*.md\", \"assets/logo.png\"], exclude=[\"docs/OLD_README.md\"])\n</code></pre> <p>Read all JavaScript files but explicitly including test files and all JPEGs in an <code>images</code> folder:</p> <pre><code>read_many_files(paths=[\"**/*.js\"], include=[\"**/*.test.js\", \"images/**/*.jpg\"], useDefaultExcludes=False)\n</code></pre>"},{"location":"tools/multi-file/#important-notes","title":"Important notes","text":"<ul> <li>Binary file handling:</li> <li>Image/PDF files: The tool can read common image types (PNG, JPEG, etc.) and PDF files, returning them as base64 encoded data. These files must be explicitly targeted by the <code>paths</code> or <code>include</code> patterns (e.g., by specifying the exact filename like <code>image.png</code> or a pattern like <code>*.jpeg</code>).</li> <li>Other binary files: The tool attempts to detect and skip other types of binary files by examining their initial content for null bytes. The tool excludes these files from its output.</li> <li>Performance: Reading a very large number of files or very large individual files can be resource-intensive.</li> <li>Path specificity: Ensure paths and glob patterns are correctly specified relative to the tool's target directory. For image/PDF files, ensure the patterns are specific enough to include them.</li> <li>Default excludes: Be aware of the default exclusion patterns (like <code>node_modules</code>, <code>.git</code>) and use <code>useDefaultExcludes=False</code> if you need to override them, but do so cautiously.</li> </ul>"},{"location":"tools/shell/","title":"Shell Tool (<code>run_shell_command</code>)","text":"<p>This document describes the <code>run_shell_command</code> tool for the Gemini CLI.</p>"},{"location":"tools/shell/#description","title":"Description","text":"<p>Use <code>run_shell_command</code> to interact with the underlying system, run scripts, or perform command-line operations. <code>run_shell_command</code> executes a given shell command. On Windows, the command will be executed with <code>cmd.exe /c</code>. On other platforms, the command will be executed with <code>bash -c</code>.</p>"},{"location":"tools/shell/#arguments","title":"Arguments","text":"<p><code>run_shell_command</code> takes the following arguments:</p> <ul> <li><code>command</code> (string, required): The exact shell command to execute.</li> <li><code>description</code> (string, optional): A brief description of the command's purpose, which will be shown to the user.</li> <li><code>directory</code> (string, optional): The directory (relative to the project root) in which to execute the command. If not provided, the command runs in the project root.</li> </ul>"},{"location":"tools/shell/#how-to-use-run_shell_command-with-the-gemini-cli","title":"How to use <code>run_shell_command</code> with the Gemini CLI","text":"<p>When using <code>run_shell_command</code>, the command is executed as a subprocess. <code>run_shell_command</code> can start background processes using <code>&amp;</code>. The tool returns detailed information about the execution, including:</p> <ul> <li><code>Command</code>: The command that was executed.</li> <li><code>Directory</code>: The directory where the command was run.</li> <li><code>Stdout</code>: Output from the standard output stream.</li> <li><code>Stderr</code>: Output from the standard error stream.</li> <li><code>Error</code>: Any error message reported by the subprocess.</li> <li><code>Exit Code</code>: The exit code of the command.</li> <li><code>Signal</code>: The signal number if the command was terminated by a signal.</li> <li><code>Background PIDs</code>: A list of PIDs for any background processes started.</li> </ul> <p>Usage:</p> <pre><code>run_shell_command(command=\"Your commands.\", description=\"Your description of the command.\", directory=\"Your execution directory.\")\n</code></pre>"},{"location":"tools/shell/#run_shell_command-examples","title":"<code>run_shell_command</code> examples","text":"<p>List files in the current directory:</p> <pre><code>run_shell_command(command=\"ls -la\")\n</code></pre> <p>Run a script in a specific directory:</p> <pre><code>run_shell_command(command=\"./my_script.sh\", directory=\"scripts\", description=\"Run my custom script\")\n</code></pre> <p>Start a background server:</p> <pre><code>run_shell_command(command=\"npm run dev &amp;\", description=\"Start development server in background\")\n</code></pre>"},{"location":"tools/shell/#important-notes","title":"Important notes","text":"<ul> <li>Security: Be cautious when executing commands, especially those constructed from user input, to prevent security vulnerabilities.</li> <li>Interactive commands: Avoid commands that require interactive user input, as this can cause the tool to hang. Use non-interactive flags if available (e.g., <code>npm init -y</code>).</li> <li>Error handling: Check the <code>Stderr</code>, <code>Error</code>, and <code>Exit Code</code> fields to determine if a command executed successfully.</li> <li>Background processes: When a command is run in the background with <code>&amp;</code>, the tool will return immediately and the process will continue to run in the background. The <code>Background PIDs</code> field will contain the process ID of the background process.</li> </ul>"},{"location":"tools/shell/#command-restrictions","title":"Command Restrictions","text":"<p>You can restrict the commands that can be executed by the <code>run_shell_command</code> tool by using the <code>coreTools</code> and <code>excludeTools</code> settings in your configuration file.</p> <ul> <li><code>coreTools</code>: To restrict <code>run_shell_command</code> to a specific set of commands, add entries to the <code>coreTools</code> list in the format <code>run_shell_command(&lt;command&gt;)</code>. For example, <code>\"coreTools\": [\"run_shell_command(git)\"]</code> will only allow <code>git</code> commands. Including the generic <code>run_shell_command</code> acts as a wildcard, allowing any command not explicitly blocked.</li> <li><code>excludeTools</code>: To block specific commands, add entries to the <code>excludeTools</code> list in the format <code>run_shell_command(&lt;command&gt;)</code>. For example, <code>\"excludeTools\": [\"run_shell_command(rm)\"]</code> will block <code>rm</code> commands.</li> </ul> <p>The validation logic is designed to be secure and flexible:</p> <ol> <li>Command Chaining Disabled: The tool automatically splits commands chained with <code>&amp;&amp;</code>, <code>||</code>, or <code>;</code> and validates each part separately. If any part of the chain is disallowed, the entire command is blocked.</li> <li>Prefix Matching: The tool uses prefix matching. For example, if you allow <code>git</code>, you can run <code>git status</code> or <code>git log</code>.</li> <li>Blocklist Precedence: The <code>excludeTools</code> list is always checked first. If a command matches a blocked prefix, it will be denied, even if it also matches an allowed prefix in <code>coreTools</code>.</li> </ol>"},{"location":"tools/shell/#command-restriction-examples","title":"Command Restriction Examples","text":"<p>Allow only specific command prefixes</p> <p>To allow only <code>git</code> and <code>npm</code> commands, and block all others:</p> <pre><code>{\n  \"coreTools\": [\"run_shell_command(git)\", \"run_shell_command(npm)\"]\n}\n</code></pre> <ul> <li><code>git status</code>: Allowed</li> <li><code>npm install</code>: Allowed</li> <li><code>ls -l</code>: Blocked</li> </ul> <p>Block specific command prefixes</p> <p>To block <code>rm</code> and allow all other commands:</p> <pre><code>{\n  \"coreTools\": [\"run_shell_command\"],\n  \"excludeTools\": [\"run_shell_command(rm)\"]\n}\n</code></pre> <ul> <li><code>rm -rf /</code>: Blocked</li> <li><code>git status</code>: Allowed</li> <li><code>npm install</code>: Allowed</li> </ul> <p>Blocklist takes precedence</p> <p>If a command prefix is in both <code>coreTools</code> and <code>excludeTools</code>, it will be blocked.</p> <pre><code>{\n  \"coreTools\": [\"run_shell_command(git)\"],\n  \"excludeTools\": [\"run_shell_command(git push)\"]\n}\n</code></pre> <ul> <li><code>git push origin main</code>: Blocked</li> <li><code>git status</code>: Allowed</li> </ul> <p>Block all shell commands</p> <p>To block all shell commands, add the <code>run_shell_command</code> wildcard to <code>excludeTools</code>:</p> <pre><code>{\n  \"excludeTools\": [\"run_shell_command\"]\n}\n</code></pre> <ul> <li><code>ls -l</code>: Blocked</li> <li><code>any other command</code>: Blocked</li> </ul>"},{"location":"tools/shell/#security-note-for-excludetools","title":"Security Note for <code>excludeTools</code>","text":"<p>Command-specific restrictions in <code>excludeTools</code> for <code>run_shell_command</code> are based on simple string matching and can be easily bypassed. This feature is not a security mechanism and should not be relied upon to safely execute untrusted code. It is recommended to use <code>coreTools</code> to explicitly select commands that can be executed.</p>"},{"location":"tools/web-fetch/","title":"Web Fetch Tool (<code>web_fetch</code>)","text":"<p>This document describes the <code>web_fetch</code> tool for the Gemini CLI.</p>"},{"location":"tools/web-fetch/#description","title":"Description","text":"<p>Use <code>web_fetch</code> to summarize, compare, or extract information from web pages. The <code>web_fetch</code> tool processes content from one or more URLs (up to 20) embedded in a prompt. <code>web_fetch</code> takes a natural language prompt and returns a generated response.</p>"},{"location":"tools/web-fetch/#arguments","title":"Arguments","text":"<p><code>web_fetch</code> takes one argument:</p> <ul> <li><code>prompt</code> (string, required): A comprehensive prompt that includes the URL(s) (up to 20) to fetch and specific instructions on how to process their content. For example: <code>\"Summarize https://example.com/article and extract key points from https://another.com/data\"</code>. The prompt must contain at least one URL starting with <code>http://</code> or <code>https://</code>.</li> </ul>"},{"location":"tools/web-fetch/#how-to-use-web_fetch-with-the-gemini-cli","title":"How to use <code>web_fetch</code> with the Gemini CLI","text":"<p>To use <code>web_fetch</code> with the Gemini CLI, provide a natural language prompt that contains URLs. The tool will ask for confirmation before fetching any URLs. Once confirmed, the tool will process URLs through Gemini API's <code>urlContext</code>.</p> <p>If the Gemini API cannot access the URL, the tool will fall back to fetching content directly from the local machine. The tool will format the response, including source attribution and citations where possible. The tool will then provide the response to the user.</p> <p>Usage:</p> <pre><code>web_fetch(prompt=\"Your prompt, including a URL such as https://google.com.\")\n</code></pre>"},{"location":"tools/web-fetch/#web_fetch-examples","title":"<code>web_fetch</code> examples","text":"<p>Summarize a single article:</p> <pre><code>web_fetch(prompt=\"Can you summarize the main points of https://example.com/news/latest\")\n</code></pre> <p>Compare two articles:</p> <pre><code>web_fetch(prompt=\"What are the differences in the conclusions of these two papers: https://arxiv.org/abs/2401.0001 and https://arxiv.org/abs/2401.0002?\")\n</code></pre>"},{"location":"tools/web-fetch/#important-notes","title":"Important notes","text":"<ul> <li>URL processing: <code>web_fetch</code> relies on the Gemini API's ability to access and process the given URLs.</li> <li>Output quality: The quality of the output will depend on the clarity of the instructions in the prompt.</li> </ul>"},{"location":"tools/web-search/","title":"Web Search Tool (<code>google_web_search</code>)","text":"<p>This document describes the <code>google_web_search</code> tool.</p>"},{"location":"tools/web-search/#description","title":"Description","text":"<p>Use <code>google_web_search</code> to perform a web search using Google Search via the Gemini API. The <code>google_web_search</code> tool returns a summary of web results with sources.</p>"},{"location":"tools/web-search/#arguments","title":"Arguments","text":"<p><code>google_web_search</code> takes one argument:</p> <ul> <li><code>query</code> (string, required): The search query.</li> </ul>"},{"location":"tools/web-search/#how-to-use-google_web_search-with-the-gemini-cli","title":"How to use <code>google_web_search</code> with the Gemini CLI","text":"<p>The <code>google_web_search</code> tool sends a query to the Gemini API, which then performs a web search. <code>google_web_search</code> will return a generated response based on the search results, including citations and sources.</p> <p>Usage:</p> <pre><code>google_web_search(query=\"Your query goes here.\")\n</code></pre>"},{"location":"tools/web-search/#google_web_search-examples","title":"<code>google_web_search</code> examples","text":"<p>Get information on a topic:</p> <pre><code>google_web_search(query=\"latest advancements in AI-powered code generation\")\n</code></pre>"},{"location":"tools/web-search/#important-notes","title":"Important notes","text":"<ul> <li>Response returned: The <code>google_web_search</code> tool returns a processed summary, not a raw list of search results.</li> <li>Citations: The response includes citations to the sources used to generate the summary.</li> </ul>"}]}